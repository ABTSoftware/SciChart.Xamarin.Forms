//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SciChart.Xamarin.Views.Model;
using SciChart.Xamarin.Views.Model.DataSeries;
using System;
using Xamarin.Forms;


namespace SciChart.Xamarin.Views
{
	
}
namespace SciChart.Xamarin.Views.Visuals.RenderableSeries
{
	
	
	public partial class FastLineRenderableSeries : CrossPlatformRenderableSeriesBase, SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastLineRenderableSeries
	{
	}
}
namespace SciChart.Xamarin.Views.Visuals.RenderableSeries
{
	
	
	public abstract partial class CrossPlatformRenderableSeriesBase : View, SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries
	{
		
		public static BindableProperty DataSeriesProperty = BindableProperty.Create("DataSeries", typeof(IDataSeries), typeof(CrossPlatformRenderableSeriesBase), null, BindingMode.Default, null, OnDataSeriesPropertyChanged, null, null, DefaultDataSeriesPropertyValueCreator);
		
		public static BindableProperty YAxisIdProperty = BindableProperty.Create("YAxisId", typeof(String), typeof(CrossPlatformRenderableSeriesBase), null, BindingMode.Default, null, OnYAxisIdPropertyChanged, null, null, DefaultYAxisIdPropertyValueCreator);
		
		public static BindableProperty XAxisIdProperty = BindableProperty.Create("XAxisId", typeof(String), typeof(CrossPlatformRenderableSeriesBase), null, BindingMode.Default, null, OnXAxisIdPropertyChanged, null, null, DefaultXAxisIdPropertyValueCreator);
		
		public IDataSeries DataSeries
		{
			get
			{
				return ((IDataSeries)(this.GetValue(DataSeriesProperty)));
			}
			set
			{
				this.SetValue(DataSeriesProperty, value);
			}
		}
		
		public String YAxisId
		{
			get
			{
				return ((String)(this.GetValue(YAxisIdProperty)));
			}
			set
			{
				this.SetValue(YAxisIdProperty, value);
			}
		}
		
		public String XAxisId
		{
			get
			{
				return ((String)(this.GetValue(XAxisIdProperty)));
			}
			set
			{
				this.SetValue(XAxisIdProperty, value);
			}
		}
		
		private static void OnDataSeriesPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().DataSeries = ((IDataSeries)(newValue));
		}
		
		private static object DefaultDataSeriesPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().DataSeries;
		}
		
		private static void OnYAxisIdPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().YAxisId = ((String)(newValue));
		}
		
		private static object DefaultYAxisIdPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().YAxisId;
		}
		
		private static void OnXAxisIdPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().XAxisId = ((String)(newValue));
		}
		
		private static object DefaultXAxisIdPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().XAxisId;
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.Axes
{
	
	
	public abstract partial class AxisBase : AxisCore, SciChart.Xamarin.Views.Visuals.Axes.IAxis
	{
	}
}
namespace SciChart.Xamarin.Views.Visuals.Axes
{
	
	
	public abstract partial class AxisCore : View, SciChart.Xamarin.Views.Visuals.Axes.IAxisCore
	{
		
		public static BindableProperty AxisTitleProperty = BindableProperty.Create("AxisTitle", typeof(String), typeof(AxisCore), null, BindingMode.Default, null, OnAxisTitlePropertyChanged, null, null, DefaultAxisTitlePropertyValueCreator);
		
		public static BindableProperty FlipCoordinatesProperty = BindableProperty.Create("FlipCoordinates", typeof(Boolean), typeof(AxisCore), null, BindingMode.Default, null, OnFlipCoordinatesPropertyChanged, null, null, DefaultFlipCoordinatesPropertyValueCreator);
		
		public static BindableProperty TextFormattingProperty = BindableProperty.Create("TextFormatting", typeof(String), typeof(AxisCore), null, BindingMode.Default, null, OnTextFormattingPropertyChanged, null, null, DefaultTextFormattingPropertyValueCreator);
		
		public static BindableProperty DrawMinorTicksProperty = BindableProperty.Create("DrawMinorTicks", typeof(Boolean), typeof(AxisCore), null, BindingMode.Default, null, OnDrawMinorTicksPropertyChanged, null, null, DefaultDrawMinorTicksPropertyValueCreator);
		
		public static BindableProperty DrawLabelsProperty = BindableProperty.Create("DrawLabels", typeof(Boolean), typeof(AxisCore), null, BindingMode.Default, null, OnDrawLabelsPropertyChanged, null, null, DefaultDrawLabelsPropertyValueCreator);
		
		public static BindableProperty DrawMajorTicksProperty = BindableProperty.Create("DrawMajorTicks", typeof(Boolean), typeof(AxisCore), null, BindingMode.Default, null, OnDrawMajorTicksPropertyChanged, null, null, DefaultDrawMajorTicksPropertyValueCreator);
		
		public static BindableProperty DrawMajorGridLinesProperty = BindableProperty.Create("DrawMajorGridLines", typeof(Boolean), typeof(AxisCore), null, BindingMode.Default, null, OnDrawMajorGridLinesPropertyChanged, null, null, DefaultDrawMajorGridLinesPropertyValueCreator);
		
		public static BindableProperty DrawMinorGridLinesProperty = BindableProperty.Create("DrawMinorGridLines", typeof(Boolean), typeof(AxisCore), null, BindingMode.Default, null, OnDrawMinorGridLinesPropertyChanged, null, null, DefaultDrawMinorGridLinesPropertyValueCreator);
		
		public static BindableProperty DrawMajorBandsProperty = BindableProperty.Create("DrawMajorBands", typeof(Boolean), typeof(AxisCore), null, BindingMode.Default, null, OnDrawMajorBandsPropertyChanged, null, null, DefaultDrawMajorBandsPropertyValueCreator);
		
		public static BindableProperty AxisBandsFillProperty = BindableProperty.Create("AxisBandsFill", typeof(Color), typeof(AxisCore), null, BindingMode.Default, null, OnAxisBandsFillPropertyChanged, null, null, DefaultAxisBandsFillPropertyValueCreator);
		
		public static BindableProperty AutoRangeProperty = BindableProperty.Create("AutoRange", typeof(AutoRange), typeof(AxisCore), null, BindingMode.Default, null, OnAutoRangePropertyChanged, null, null, DefaultAutoRangePropertyValueCreator);
		
		public static BindableProperty AxisIdProperty = BindableProperty.Create("AxisId", typeof(String), typeof(AxisCore), null, BindingMode.Default, null, OnAxisIdPropertyChanged, null, null, DefaultAxisIdPropertyValueCreator);
		
		public static BindableProperty VisibleRangeProperty = BindableProperty.Create("VisibleRange", typeof(IRange), typeof(AxisCore), null, BindingMode.Default, null, OnVisibleRangePropertyChanged, null, null, DefaultVisibleRangePropertyValueCreator);
		
		public static BindableProperty GrowByProperty = BindableProperty.Create("GrowBy", typeof(IRange), typeof(AxisCore), null, BindingMode.Default, null, OnGrowByPropertyChanged, null, null, DefaultGrowByPropertyValueCreator);
		
		public String AxisTitle
		{
			get
			{
				return ((String)(this.GetValue(AxisTitleProperty)));
			}
			set
			{
				this.SetValue(AxisTitleProperty, value);
			}
		}
		
		public Boolean FlipCoordinates
		{
			get
			{
				return ((Boolean)(this.GetValue(FlipCoordinatesProperty)));
			}
			set
			{
				this.SetValue(FlipCoordinatesProperty, value);
			}
		}
		
		public String TextFormatting
		{
			get
			{
				return ((String)(this.GetValue(TextFormattingProperty)));
			}
			set
			{
				this.SetValue(TextFormattingProperty, value);
			}
		}
		
		public Boolean DrawMinorTicks
		{
			get
			{
				return ((Boolean)(this.GetValue(DrawMinorTicksProperty)));
			}
			set
			{
				this.SetValue(DrawMinorTicksProperty, value);
			}
		}
		
		public Boolean DrawLabels
		{
			get
			{
				return ((Boolean)(this.GetValue(DrawLabelsProperty)));
			}
			set
			{
				this.SetValue(DrawLabelsProperty, value);
			}
		}
		
		public Boolean DrawMajorTicks
		{
			get
			{
				return ((Boolean)(this.GetValue(DrawMajorTicksProperty)));
			}
			set
			{
				this.SetValue(DrawMajorTicksProperty, value);
			}
		}
		
		public Boolean DrawMajorGridLines
		{
			get
			{
				return ((Boolean)(this.GetValue(DrawMajorGridLinesProperty)));
			}
			set
			{
				this.SetValue(DrawMajorGridLinesProperty, value);
			}
		}
		
		public Boolean DrawMinorGridLines
		{
			get
			{
				return ((Boolean)(this.GetValue(DrawMinorGridLinesProperty)));
			}
			set
			{
				this.SetValue(DrawMinorGridLinesProperty, value);
			}
		}
		
		public Boolean DrawMajorBands
		{
			get
			{
				return ((Boolean)(this.GetValue(DrawMajorBandsProperty)));
			}
			set
			{
				this.SetValue(DrawMajorBandsProperty, value);
			}
		}
		
		public Color AxisBandsFill
		{
			get
			{
				return ((Color)(this.GetValue(AxisBandsFillProperty)));
			}
			set
			{
				this.SetValue(AxisBandsFillProperty, value);
			}
		}
		
		public AutoRange AutoRange
		{
			get
			{
				return ((AutoRange)(this.GetValue(AutoRangeProperty)));
			}
			set
			{
				this.SetValue(AutoRangeProperty, value);
			}
		}
		
		public String AxisId
		{
			get
			{
				return ((String)(this.GetValue(AxisIdProperty)));
			}
			set
			{
				this.SetValue(AxisIdProperty, value);
			}
		}
		
		public IRange VisibleRange
		{
			get
			{
				return ((IRange)(this.GetValue(VisibleRangeProperty)));
			}
			set
			{
				this.SetValue(VisibleRangeProperty, value);
			}
		}
		
		public IRange GrowBy
		{
			get
			{
				return ((IRange)(this.GetValue(GrowByProperty)));
			}
			set
			{
				this.SetValue(GrowByProperty, value);
			}
		}
		
		private static void OnAxisTitlePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AxisTitle = ((String)(newValue));
		}
		
		private static object DefaultAxisTitlePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AxisTitle;
		}
		
		private static void OnFlipCoordinatesPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().FlipCoordinates = ((Boolean)(newValue));
		}
		
		private static object DefaultFlipCoordinatesPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().FlipCoordinates;
		}
		
		private static void OnTextFormattingPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().TextFormatting = ((String)(newValue));
		}
		
		private static object DefaultTextFormattingPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().TextFormatting;
		}
		
		private static void OnDrawMinorTicksPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMinorTicks = ((Boolean)(newValue));
		}
		
		private static object DefaultDrawMinorTicksPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMinorTicks;
		}
		
		private static void OnDrawLabelsPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawLabels = ((Boolean)(newValue));
		}
		
		private static object DefaultDrawLabelsPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawLabels;
		}
		
		private static void OnDrawMajorTicksPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMajorTicks = ((Boolean)(newValue));
		}
		
		private static object DefaultDrawMajorTicksPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMajorTicks;
		}
		
		private static void OnDrawMajorGridLinesPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMajorGridLines = ((Boolean)(newValue));
		}
		
		private static object DefaultDrawMajorGridLinesPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMajorGridLines;
		}
		
		private static void OnDrawMinorGridLinesPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMinorGridLines = ((Boolean)(newValue));
		}
		
		private static object DefaultDrawMinorGridLinesPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMinorGridLines;
		}
		
		private static void OnDrawMajorBandsPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMajorBands = ((Boolean)(newValue));
		}
		
		private static object DefaultDrawMajorBandsPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMajorBands;
		}
		
		private static void OnAxisBandsFillPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AxisBandsFill = ((Color)(newValue));
		}
		
		private static object DefaultAxisBandsFillPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AxisBandsFill;
		}
		
		private static void OnAutoRangePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AutoRange = ((AutoRange)(newValue));
		}
		
		private static object DefaultAutoRangePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AutoRange;
		}
		
		private static void OnAxisIdPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AxisId = ((String)(newValue));
		}
		
		private static object DefaultAxisIdPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AxisId;
		}
		
		private static void OnVisibleRangePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().VisibleRange = ((IRange)(newValue));
		}
		
		private static object DefaultVisibleRangePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().VisibleRange;
		}
		
		private static void OnGrowByPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().GrowBy = ((IRange)(newValue));
		}
		
		private static object DefaultGrowByPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().GrowBy;
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.Axes
{
	
	
	public partial class NumericAxis : AxisBase, SciChart.Xamarin.Views.Visuals.Axes.INumericAxis
	{
	}
}
namespace SciChart.Xamarin.Views.Visuals.Annotations
{
	
	
	public abstract partial class AnnotationBase : View, SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation
	{
		
		public static BindableProperty X1Property = BindableProperty.Create("X1", typeof(IComparable), typeof(AnnotationBase), null, BindingMode.Default, null, OnX1PropertyChanged, null, null, DefaultX1PropertyValueCreator);
		
		public static BindableProperty X2Property = BindableProperty.Create("X2", typeof(IComparable), typeof(AnnotationBase), null, BindingMode.Default, null, OnX2PropertyChanged, null, null, DefaultX2PropertyValueCreator);
		
		public static BindableProperty Y1Property = BindableProperty.Create("Y1", typeof(IComparable), typeof(AnnotationBase), null, BindingMode.Default, null, OnY1PropertyChanged, null, null, DefaultY1PropertyValueCreator);
		
		public static BindableProperty Y2Property = BindableProperty.Create("Y2", typeof(IComparable), typeof(AnnotationBase), null, BindingMode.Default, null, OnY2PropertyChanged, null, null, DefaultY2PropertyValueCreator);
		
		public IComparable X1
		{
			get
			{
				return ((IComparable)(this.GetValue(X1Property)));
			}
			set
			{
				this.SetValue(X1Property, value);
			}
		}
		
		public IComparable X2
		{
			get
			{
				return ((IComparable)(this.GetValue(X2Property)));
			}
			set
			{
				this.SetValue(X2Property, value);
			}
		}
		
		public IComparable Y1
		{
			get
			{
				return ((IComparable)(this.GetValue(Y1Property)));
			}
			set
			{
				this.SetValue(Y1Property, value);
			}
		}
		
		public IComparable Y2
		{
			get
			{
				return ((IComparable)(this.GetValue(Y2Property)));
			}
			set
			{
				this.SetValue(Y2Property, value);
			}
		}
		
		private static void OnX1PropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().X1 = ((IComparable)(newValue));
		}
		
		private static object DefaultX1PropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().X1;
		}
		
		private static void OnX2PropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().X2 = ((IComparable)(newValue));
		}
		
		private static object DefaultX2PropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().X2;
		}
		
		private static void OnY1PropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().Y1 = ((IComparable)(newValue));
		}
		
		private static object DefaultY1PropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().Y1;
		}
		
		private static void OnY2PropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().Y2 = ((IComparable)(newValue));
		}
		
		private static object DefaultY2PropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().Y2;
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.Annotations
{
	
	
	public partial class BoxAnnotation : AnnotationBase, SciChart.Xamarin.Views.Visuals.Annotations.IBoxAnnotation
	{
	}
}
namespace SciChart.Xamarin.Views.Modifiers
{
	
	
	public abstract partial class ChartModifierBase : ChartModifierCore, SciChart.Xamarin.Views.Modifiers.IChartModifier
	{
	}
}
namespace SciChart.Xamarin.Views.Modifiers
{
	
	
	public abstract partial class ChartModifierCore : View, SciChart.Xamarin.Views.Modifiers.IChartModifierCore
	{
	}
}
namespace SciChart.Xamarin.Views.Modifiers
{
	
	
	public partial class ZoomPanModifier : ChartModifierBase, SciChart.Xamarin.Views.Modifiers.IZoomPanModifier
	{
	}
}
namespace SciChart.Xamarin.Views.Model
{
	
	
	public partial class DoubleRange : RangeBase, SciChart.Xamarin.Views.Model.IDoubleRange
	{
	}
}
namespace SciChart.Xamarin.Views.Model.DataSeries
{
	
	
	public abstract partial class CrossPlatformDataSeriesBase : SciChart.Xamarin.Views.Model.DataSeries.IDataSeries
	{
		
		public String SeriesName
		{
			get
			{
				return NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IDataSeries>().SeriesName;
			}
			set
			{
				NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IDataSeries>().SeriesName = value;
			}
		}
		
		public Int32 Count
		{
			get
			{
				return NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IDataSeries>().Count;
			}
		}
		
		public Boolean AcceptsUnsortedData
		{
			get
			{
				return NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IDataSeries>().AcceptsUnsortedData;
			}
			set
			{
				NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IDataSeries>().AcceptsUnsortedData = value;
			}
		}
	}
}
namespace SciChart.Xamarin.Views.Model.DataSeries
{
	
	
	public partial class XyDataSeries<TX, TY> : CrossPlatformDataSeriesBase, SciChart.Xamarin.Views.Model.DataSeries.IXyDataSeries<TX,TY>
		where TX : System.IComparable
		where TY : System.IComparable
	{
		
		public void Append(TX x, TY y)
		{
			NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IXyDataSeries<TX,TY>>().Append(x, y);
		}
	}
}
