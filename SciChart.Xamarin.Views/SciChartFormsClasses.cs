//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SciChart.Xamarin.Views.Core.Common;
using SciChart.Xamarin.Views.Core.Generation;
using SciChart.Xamarin.Views.Drawing;
using SciChart.Xamarin.Views.Model;
using SciChart.Xamarin.Views.Model.DataSeries;
using SciChart.Xamarin.Views.Model.DataSeries3D;
using SciChart.Xamarin.Views.Model.ObservableCollection;
using SciChart.Xamarin.Views.Modifiers;
using SciChart.Xamarin.Views.Visuals.Annotations;
using SciChart.Xamarin.Views.Visuals.Axes;
using SciChart.Xamarin.Views.Visuals.Axes3D;
using SciChart.Xamarin.Views.Visuals.Camera3D;
using SciChart.Xamarin.Views.Visuals.PointMarkers;
using SciChart.Xamarin.Views.Visuals.PointMarkers3D;
using SciChart.Xamarin.Views.Visuals.RenderableSeries;
using SciChart.Xamarin.Views.Visuals.RenderableSeries3D;
using System;
using XFColor = Xamarin.Forms.Color;
using Xamarin.Forms;


namespace SciChart.Xamarin.Views
{
	
}
namespace SciChart.Xamarin.Views.Core.Common
{
	
	
	public partial interface INativeSciChartObjectFactory
	{
		
		SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastCandlestickRenderableSeries NewFastCandlestickRenderableSeries();
		
		SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastLineRenderableSeries NewFastLineRenderableSeries();
		
		SciChart.Xamarin.Views.Visuals.RenderableSeries3D.IScatterRenderableSeries3D NewScatterRenderableSeries3D();
		
		SciChart.Xamarin.Views.Visuals.PointMarkers.IEllipsePointMarker NewEllipsePointMarker();
		
		SciChart.Xamarin.Views.Visuals.PointMarkers3D.IEllipsePointMarker3D NewEllipsePointMarker3D();
		
		SciChart.Xamarin.Views.Visuals.Axes.INumericAxis NewNumericAxis();
		
		SciChart.Xamarin.Views.Visuals.Axes3D.INumericAxis3D NewNumericAxis3D();
		
		SciChart.Xamarin.Views.Visuals.Annotations.IBoxAnnotation NewBoxAnnotation();
		
		SciChart.Xamarin.Views.Modifiers.IModifierGroup NewModifierGroup();
		
		SciChart.Xamarin.Views.Modifiers.IPinchZoomModifier NewPinchZoomModifier();
		
		SciChart.Xamarin.Views.Modifiers.ITooltipModifier NewTooltipModifier();
		
		SciChart.Xamarin.Views.Modifiers.IZoomExtentsModifier NewZoomExtentsModifier();
		
		SciChart.Xamarin.Views.Modifiers.IZoomPanModifier NewZoomPanModifier();
		
		SciChart.Xamarin.Views.Model.IDoubleRange NewDoubleRange();
		
		SciChart.Xamarin.Views.Model.IDoubleRange NewDoubleRange(double min, double max);
		
		SciChart.Xamarin.Views.Model.DataSeries.IOhlcDataSeries<TX,TY> NewOhlcDataSeries<TX, TY>()
			where TX : System.IComparable
			where TY : System.IComparable;
		
		SciChart.Xamarin.Views.Model.DataSeries.IXyDataSeries<TX,TY> NewXyDataSeries<TX, TY>()
			where TX : System.IComparable
			where TY : System.IComparable;
		
		SciChart.Xamarin.Views.Model.DataSeries3D.IXyzDataSeries3D<TX,TY,TZ> NewXyzDataSeries3D<TX, TY, TZ>()
			where TX : System.IComparable
			where TY : System.IComparable
			where TZ : System.IComparable;
		
		SciChart.Xamarin.Views.Drawing.IFontStyle NewFontStyle(float textSize, XFColor textColor);
		
		SciChart.Xamarin.Views.Drawing.ILinearGradientBrushStyle NewLinearGradientBrushStyle(float x1, float y1, float x2, float y2, XFColor startColor, XFColor endColor);
		
		SciChart.Xamarin.Views.Drawing.ISolidBrushStyle NewSolidBrushStyle(XFColor color);
		
		SciChart.Xamarin.Views.Drawing.ISolidPenStyle NewSolidPenStyle(XFColor color, float thickness, bool antiAliasing, float[] strokeDashArray);
	}
}
namespace SciChart.Xamarin.Views.Visuals.RenderableSeries
{
	
	
	public partial class FastCandlestickRenderableSeries : OhlcRenderableSeriesBase, SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastCandlestickRenderableSeries
	{
		
		public static BindableProperty FillDownBrushStyleProperty = BindableProperty.Create("FillDownBrushStyle", typeof(SciChart.Xamarin.Views.Drawing.IBrushStyle), typeof(FastCandlestickRenderableSeries), null, BindingMode.Default, null, OnFillDownBrushStylePropertyChanged, null, null, DefaultFillDownBrushStylePropertyValueCreator);
		
		public static BindableProperty FillUpBrushStyleProperty = BindableProperty.Create("FillUpBrushStyle", typeof(SciChart.Xamarin.Views.Drawing.IBrushStyle), typeof(FastCandlestickRenderableSeries), null, BindingMode.Default, null, OnFillUpBrushStylePropertyChanged, null, null, DefaultFillUpBrushStylePropertyValueCreator);
		
		public FastCandlestickRenderableSeries() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewFastCandlestickRenderableSeries())
		{
		}
		
		public FastCandlestickRenderableSeries(SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastCandlestickRenderableSeries nativeObject) : 
				base(nativeObject)
		{
		}
		
		public SciChart.Xamarin.Views.Drawing.IBrushStyle FillDownBrushStyle
		{
			get
			{
				return ((SciChart.Xamarin.Views.Drawing.IBrushStyle)(this.GetValue(FillDownBrushStyleProperty)));
			}
			set
			{
				this.SetValue(FillDownBrushStyleProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Drawing.IBrushStyle FillUpBrushStyle
		{
			get
			{
				return ((SciChart.Xamarin.Views.Drawing.IBrushStyle)(this.GetValue(FillUpBrushStyleProperty)));
			}
			set
			{
				this.SetValue(FillUpBrushStyleProperty, value);
			}
		}
		
		private static void OnFillDownBrushStylePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastCandlestickRenderableSeries>().FillDownBrushStyle = ((SciChart.Xamarin.Views.Drawing.IBrushStyle)(newValue));
		}
		
		private static object DefaultFillDownBrushStylePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastCandlestickRenderableSeries>().FillDownBrushStyle;
		}
		
		private static void OnFillUpBrushStylePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastCandlestickRenderableSeries>().FillUpBrushStyle = ((SciChart.Xamarin.Views.Drawing.IBrushStyle)(newValue));
		}
		
		private static object DefaultFillUpBrushStylePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastCandlestickRenderableSeries>().FillUpBrushStyle;
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.RenderableSeries
{
	
	
	public partial class FastLineRenderableSeries : RenderableSeriesBase, SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastLineRenderableSeries
	{
		
		public FastLineRenderableSeries() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewFastLineRenderableSeries())
		{
		}
		
		public FastLineRenderableSeries(SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastLineRenderableSeries nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.RenderableSeries
{
	
	
	public abstract partial class OhlcRenderableSeriesBase : RenderableSeriesBase, SciChart.Xamarin.Views.Visuals.RenderableSeries.IOhlcRenderableSeriesBase
	{
		
		public static BindableProperty StrokeDownStyleProperty = BindableProperty.Create("StrokeDownStyle", typeof(SciChart.Xamarin.Views.Drawing.IPenStyle), typeof(OhlcRenderableSeriesBase), null, BindingMode.Default, null, OnStrokeDownStylePropertyChanged, null, null, DefaultStrokeDownStylePropertyValueCreator);
		
		public static BindableProperty StrokeUpStyleProperty = BindableProperty.Create("StrokeUpStyle", typeof(SciChart.Xamarin.Views.Drawing.IPenStyle), typeof(OhlcRenderableSeriesBase), null, BindingMode.Default, null, OnStrokeUpStylePropertyChanged, null, null, DefaultStrokeUpStylePropertyValueCreator);
		
		public static BindableProperty DataPointWidthProperty = BindableProperty.Create("DataPointWidth", typeof(double), typeof(OhlcRenderableSeriesBase), null, BindingMode.Default, null, OnDataPointWidthPropertyChanged, null, null, DefaultDataPointWidthPropertyValueCreator);
		
		public OhlcRenderableSeriesBase(SciChart.Xamarin.Views.Visuals.RenderableSeries.IOhlcRenderableSeriesBase nativeObject) : 
				base(nativeObject)
		{
		}
		
		public SciChart.Xamarin.Views.Drawing.IPenStyle StrokeDownStyle
		{
			get
			{
				return ((SciChart.Xamarin.Views.Drawing.IPenStyle)(this.GetValue(StrokeDownStyleProperty)));
			}
			set
			{
				this.SetValue(StrokeDownStyleProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Drawing.IPenStyle StrokeUpStyle
		{
			get
			{
				return ((SciChart.Xamarin.Views.Drawing.IPenStyle)(this.GetValue(StrokeUpStyleProperty)));
			}
			set
			{
				this.SetValue(StrokeUpStyleProperty, value);
			}
		}
		
		public double DataPointWidth
		{
			get
			{
				return ((double)(this.GetValue(DataPointWidthProperty)));
			}
			set
			{
				this.SetValue(DataPointWidthProperty, value);
			}
		}
		
		private static void OnStrokeDownStylePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IOhlcRenderableSeriesBase>().StrokeDownStyle = ((SciChart.Xamarin.Views.Drawing.IPenStyle)(newValue));
		}
		
		private static object DefaultStrokeDownStylePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IOhlcRenderableSeriesBase>().StrokeDownStyle;
		}
		
		private static void OnStrokeUpStylePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IOhlcRenderableSeriesBase>().StrokeUpStyle = ((SciChart.Xamarin.Views.Drawing.IPenStyle)(newValue));
		}
		
		private static object DefaultStrokeUpStylePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IOhlcRenderableSeriesBase>().StrokeUpStyle;
		}
		
		private static void OnDataPointWidthPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IOhlcRenderableSeriesBase>().DataPointWidth = ((double)(newValue));
		}
		
		private static object DefaultDataPointWidthPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IOhlcRenderableSeriesBase>().DataPointWidth;
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.RenderableSeries
{
	
	
	public abstract partial class RenderableSeriesBase : RenderableSeriesCore, SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries
	{
		
		public static BindableProperty DataSeriesProperty = BindableProperty.Create("DataSeries", typeof(SciChart.Xamarin.Views.Model.DataSeries.IDataSeries), typeof(RenderableSeriesBase), null, BindingMode.Default, null, OnDataSeriesPropertyChanged, null, null, DefaultDataSeriesPropertyValueCreator);
		
		public static BindableProperty YAxisIdProperty = BindableProperty.Create("YAxisId", typeof(string), typeof(RenderableSeriesBase), null, BindingMode.Default, null, OnYAxisIdPropertyChanged, null, null, DefaultYAxisIdPropertyValueCreator);
		
		public static BindableProperty XAxisIdProperty = BindableProperty.Create("XAxisId", typeof(string), typeof(RenderableSeriesBase), null, BindingMode.Default, null, OnXAxisIdPropertyChanged, null, null, DefaultXAxisIdPropertyValueCreator);
		
		public static BindableProperty StrokeStyleProperty = BindableProperty.Create("StrokeStyle", typeof(SciChart.Xamarin.Views.Drawing.IPenStyle), typeof(RenderableSeriesBase), null, BindingMode.Default, null, OnStrokeStylePropertyChanged, null, null, DefaultStrokeStylePropertyValueCreator);
		
		public static BindableProperty PointMarkerProperty = BindableProperty.Create("PointMarker", typeof(SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker), typeof(RenderableSeriesBase), null, BindingMode.Default, null, OnPointMarkerPropertyChanged, null, null, DefaultPointMarkerPropertyValueCreator);
		
		public RenderableSeriesBase(SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries nativeObject) : 
				base(nativeObject)
		{
		}
		
		public SciChart.Xamarin.Views.Model.DataSeries.IDataSeries DataSeries
		{
			get
			{
				return ((SciChart.Xamarin.Views.Model.DataSeries.IDataSeries)(this.GetValue(DataSeriesProperty)));
			}
			set
			{
				this.SetValue(DataSeriesProperty, value);
			}
		}
		
		public string YAxisId
		{
			get
			{
				return ((string)(this.GetValue(YAxisIdProperty)));
			}
			set
			{
				this.SetValue(YAxisIdProperty, value);
			}
		}
		
		public string XAxisId
		{
			get
			{
				return ((string)(this.GetValue(XAxisIdProperty)));
			}
			set
			{
				this.SetValue(XAxisIdProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Drawing.IPenStyle StrokeStyle
		{
			get
			{
				return ((SciChart.Xamarin.Views.Drawing.IPenStyle)(this.GetValue(StrokeStyleProperty)));
			}
			set
			{
				this.SetValue(StrokeStyleProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker PointMarker
		{
			get
			{
				return ((SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker)(this.GetValue(PointMarkerProperty)));
			}
			set
			{
				this.SetValue(PointMarkerProperty, value);
			}
		}
		
		private static void OnDataSeriesPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().DataSeries = ((SciChart.Xamarin.Views.Model.DataSeries.IDataSeries)(newValue));
		}
		
		private static object DefaultDataSeriesPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().DataSeries;
		}
		
		private static void OnYAxisIdPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().YAxisId = ((string)(newValue));
		}
		
		private static object DefaultYAxisIdPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().YAxisId;
		}
		
		private static void OnXAxisIdPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().XAxisId = ((string)(newValue));
		}
		
		private static object DefaultXAxisIdPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().XAxisId;
		}
		
		private static void OnStrokeStylePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().StrokeStyle = ((SciChart.Xamarin.Views.Drawing.IPenStyle)(newValue));
		}
		
		private static object DefaultStrokeStylePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().StrokeStyle;
		}
		
		private static void OnPointMarkerPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().PointMarker = ((SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker)(newValue));
		}
		
		private static object DefaultPointMarkerPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeries>().PointMarker;
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.RenderableSeries
{
	
	
	public abstract partial class RenderableSeriesCore : View, SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeriesCore, SciChart.Xamarin.Views.Core.Common.IBindingContextProvider
	{
		
		private SciChart.Xamarin.Views.Core.Common.INativeSciChartObject _nativeSciChartObject;
		
		public RenderableSeriesCore(SciChart.Xamarin.Views.Visuals.RenderableSeries.IRenderableSeriesCore nativeObject)
		{
			_nativeSciChartObject = nativeObject.NativeSciChartObject;
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return _nativeSciChartObject;
			}
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.RenderableSeries3D
{
	
	
	public abstract partial class BaseRenderableSeries3D : RenderableSeriesCore, SciChart.Xamarin.Views.Visuals.RenderableSeries3D.IRenderableSeries3D
	{
		
		public static BindableProperty DataSeriesProperty = BindableProperty.Create("DataSeries", typeof(SciChart.Xamarin.Views.Model.DataSeries3D.IDataSeries3D), typeof(BaseRenderableSeries3D), null, BindingMode.Default, null, OnDataSeriesPropertyChanged, null, null, DefaultDataSeriesPropertyValueCreator);
		
		public static BindableProperty PointMarkerProperty = BindableProperty.Create("PointMarker", typeof(SciChart.Xamarin.Views.Visuals.PointMarkers3D.IPointMarker3D), typeof(BaseRenderableSeries3D), null, BindingMode.Default, null, OnPointMarkerPropertyChanged, null, null, DefaultPointMarkerPropertyValueCreator);
		
		public BaseRenderableSeries3D(SciChart.Xamarin.Views.Visuals.RenderableSeries3D.IRenderableSeries3D nativeObject) : 
				base(nativeObject)
		{
		}
		
		public SciChart.Xamarin.Views.Model.DataSeries3D.IDataSeries3D DataSeries
		{
			get
			{
				return ((SciChart.Xamarin.Views.Model.DataSeries3D.IDataSeries3D)(this.GetValue(DataSeriesProperty)));
			}
			set
			{
				this.SetValue(DataSeriesProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Visuals.PointMarkers3D.IPointMarker3D PointMarker
		{
			get
			{
				return ((SciChart.Xamarin.Views.Visuals.PointMarkers3D.IPointMarker3D)(this.GetValue(PointMarkerProperty)));
			}
			set
			{
				this.SetValue(PointMarkerProperty, value);
			}
		}
		
		private static void OnDataSeriesPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries3D.IRenderableSeries3D>().DataSeries = ((SciChart.Xamarin.Views.Model.DataSeries3D.IDataSeries3D)(newValue));
		}
		
		private static object DefaultDataSeriesPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries3D.IRenderableSeries3D>().DataSeries;
		}
		
		private static void OnPointMarkerPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries3D.IRenderableSeries3D>().PointMarker = ((SciChart.Xamarin.Views.Visuals.PointMarkers3D.IPointMarker3D)(newValue));
		}
		
		private static object DefaultPointMarkerPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.RenderableSeries3D.IRenderableSeries3D>().PointMarker;
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.RenderableSeries3D
{
	
	
	public partial class ScatterRenderableSeries3D : BaseRenderableSeries3D, SciChart.Xamarin.Views.Visuals.RenderableSeries3D.IScatterRenderableSeries3D
	{
		
		public ScatterRenderableSeries3D() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewScatterRenderableSeries3D())
		{
		}
		
		public ScatterRenderableSeries3D(SciChart.Xamarin.Views.Visuals.RenderableSeries3D.IScatterRenderableSeries3D nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.PointMarkers
{
	
	
	public partial class EllipsePointMarker : BasePointMarker, SciChart.Xamarin.Views.Visuals.PointMarkers.IEllipsePointMarker
	{
		
		public EllipsePointMarker() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewEllipsePointMarker())
		{
		}
		
		public EllipsePointMarker(SciChart.Xamarin.Views.Visuals.PointMarkers.IEllipsePointMarker nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.PointMarkers
{
	
	
	public abstract partial class BasePointMarker : View, SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker, SciChart.Xamarin.Views.Core.Common.IBindingContextProvider
	{
		
		public static BindableProperty StrokeStyleProperty = BindableProperty.Create("StrokeStyle", typeof(SciChart.Xamarin.Views.Drawing.IPenStyle), typeof(BasePointMarker), null, BindingMode.Default, null, OnStrokeStylePropertyChanged, null, null, DefaultStrokeStylePropertyValueCreator);
		
		public static BindableProperty FillStyleProperty = BindableProperty.Create("FillStyle", typeof(SciChart.Xamarin.Views.Drawing.IBrushStyle), typeof(BasePointMarker), null, BindingMode.Default, null, OnFillStylePropertyChanged, null, null, DefaultFillStylePropertyValueCreator);
		
		public static BindableProperty WidthProperty = BindableProperty.Create("Width", typeof(int), typeof(BasePointMarker), null, BindingMode.Default, null, OnWidthPropertyChanged, null, null, DefaultWidthPropertyValueCreator);
		
		public static BindableProperty HeightProperty = BindableProperty.Create("Height", typeof(int), typeof(BasePointMarker), null, BindingMode.Default, null, OnHeightPropertyChanged, null, null, DefaultHeightPropertyValueCreator);
		
		private SciChart.Xamarin.Views.Core.Common.INativeSciChartObject _nativeSciChartObject;
		
		public BasePointMarker(SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker nativeObject)
		{
			_nativeSciChartObject = nativeObject.NativeSciChartObject;
		}
		
		public SciChart.Xamarin.Views.Drawing.IPenStyle StrokeStyle
		{
			get
			{
				return ((SciChart.Xamarin.Views.Drawing.IPenStyle)(this.GetValue(StrokeStyleProperty)));
			}
			set
			{
				this.SetValue(StrokeStyleProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Drawing.IBrushStyle FillStyle
		{
			get
			{
				return ((SciChart.Xamarin.Views.Drawing.IBrushStyle)(this.GetValue(FillStyleProperty)));
			}
			set
			{
				this.SetValue(FillStyleProperty, value);
			}
		}
		
		public int Width
		{
			get
			{
				return ((int)(this.GetValue(WidthProperty)));
			}
			set
			{
				this.SetValue(WidthProperty, value);
			}
		}
		
		public int Height
		{
			get
			{
				return ((int)(this.GetValue(HeightProperty)));
			}
			set
			{
				this.SetValue(HeightProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return _nativeSciChartObject;
			}
		}
		
		private static void OnStrokeStylePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker>().StrokeStyle = ((SciChart.Xamarin.Views.Drawing.IPenStyle)(newValue));
		}
		
		private static object DefaultStrokeStylePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker>().StrokeStyle;
		}
		
		private static void OnFillStylePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker>().FillStyle = ((SciChart.Xamarin.Views.Drawing.IBrushStyle)(newValue));
		}
		
		private static object DefaultFillStylePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker>().FillStyle;
		}
		
		private static void OnWidthPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker>().Width = ((int)(newValue));
		}
		
		private static object DefaultWidthPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker>().Width;
		}
		
		private static void OnHeightPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker>().Height = ((int)(newValue));
		}
		
		private static object DefaultHeightPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker>().Height;
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.PointMarkers3D
{
	
	
	public partial class EllipsePointMarker3D : BasePointMarker3D, SciChart.Xamarin.Views.Visuals.PointMarkers3D.IEllipsePointMarker3D
	{
		
		public EllipsePointMarker3D() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewEllipsePointMarker3D())
		{
		}
		
		public EllipsePointMarker3D(SciChart.Xamarin.Views.Visuals.PointMarkers3D.IEllipsePointMarker3D nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.PointMarkers3D
{
	
	
	public abstract partial class BasePointMarker3D : View, SciChart.Xamarin.Views.Visuals.PointMarkers3D.IPointMarker3D, SciChart.Xamarin.Views.Core.Common.IBindingContextProvider
	{
		
		public static BindableProperty FillProperty = BindableProperty.Create("Fill", typeof(XFColor), typeof(BasePointMarker3D), null, BindingMode.Default, null, OnFillPropertyChanged, null, null, DefaultFillPropertyValueCreator);
		
		public static BindableProperty SizeProperty = BindableProperty.Create("Size", typeof(float), typeof(BasePointMarker3D), null, BindingMode.Default, null, OnSizePropertyChanged, null, null, DefaultSizePropertyValueCreator);
		
		private SciChart.Xamarin.Views.Core.Common.INativeSciChartObject _nativeSciChartObject;
		
		public BasePointMarker3D(SciChart.Xamarin.Views.Visuals.PointMarkers3D.IPointMarker3D nativeObject)
		{
			_nativeSciChartObject = nativeObject.NativeSciChartObject;
		}
		
		public XFColor Fill
		{
			get
			{
				return ((XFColor)(this.GetValue(FillProperty)));
			}
			set
			{
				this.SetValue(FillProperty, value);
			}
		}
		
		public float Size
		{
			get
			{
				return ((float)(this.GetValue(SizeProperty)));
			}
			set
			{
				this.SetValue(SizeProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return _nativeSciChartObject;
			}
		}
		
		private static void OnFillPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.PointMarkers3D.IPointMarker3D>().Fill = ((XFColor)(newValue));
		}
		
		private static object DefaultFillPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.PointMarkers3D.IPointMarker3D>().Fill;
		}
		
		private static void OnSizePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.PointMarkers3D.IPointMarker3D>().Size = ((float)(newValue));
		}
		
		private static object DefaultSizePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.PointMarkers3D.IPointMarker3D>().Size;
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.Axes
{
	
	
	public abstract partial class AxisBase : AxisCore, SciChart.Xamarin.Views.Visuals.Axes.IAxis
	{
		
		public static BindableProperty AxisAlignmentProperty = BindableProperty.Create("AxisAlignment", typeof(SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment), typeof(AxisBase), null, BindingMode.Default, null, OnAxisAlignmentPropertyChanged, null, null, DefaultAxisAlignmentPropertyValueCreator);
		
		public AxisBase(SciChart.Xamarin.Views.Visuals.Axes.IAxis nativeObject) : 
				base(nativeObject)
		{
		}
		
		public SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment AxisAlignment
		{
			get
			{
				return ((SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment)(this.GetValue(AxisAlignmentProperty)));
			}
			set
			{
				this.SetValue(AxisAlignmentProperty, value);
			}
		}
		
		private static void OnAxisAlignmentPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxis>().AxisAlignment = ((SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment)(newValue));
		}
		
		private static object DefaultAxisAlignmentPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxis>().AxisAlignment;
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.Axes
{
	
	
	public abstract partial class AxisCore : View, SciChart.Xamarin.Views.Visuals.Axes.IAxisCore, SciChart.Xamarin.Views.Core.Common.IBindingContextProvider
	{
		
		public static BindableProperty AxisTitleProperty = BindableProperty.Create("AxisTitle", typeof(string), typeof(AxisCore), null, BindingMode.Default, null, OnAxisTitlePropertyChanged, null, null, DefaultAxisTitlePropertyValueCreator);
		
		public static BindableProperty FlipCoordinatesProperty = BindableProperty.Create("FlipCoordinates", typeof(bool), typeof(AxisCore), null, BindingMode.Default, null, OnFlipCoordinatesPropertyChanged, null, null, DefaultFlipCoordinatesPropertyValueCreator);
		
		public static BindableProperty TextFormattingProperty = BindableProperty.Create("TextFormatting", typeof(string), typeof(AxisCore), null, BindingMode.Default, null, OnTextFormattingPropertyChanged, null, null, DefaultTextFormattingPropertyValueCreator);
		
		public static BindableProperty DrawMinorTicksProperty = BindableProperty.Create("DrawMinorTicks", typeof(bool), typeof(AxisCore), null, BindingMode.Default, null, OnDrawMinorTicksPropertyChanged, null, null, DefaultDrawMinorTicksPropertyValueCreator);
		
		public static BindableProperty DrawLabelsProperty = BindableProperty.Create("DrawLabels", typeof(bool), typeof(AxisCore), null, BindingMode.Default, null, OnDrawLabelsPropertyChanged, null, null, DefaultDrawLabelsPropertyValueCreator);
		
		public static BindableProperty DrawMajorTicksProperty = BindableProperty.Create("DrawMajorTicks", typeof(bool), typeof(AxisCore), null, BindingMode.Default, null, OnDrawMajorTicksPropertyChanged, null, null, DefaultDrawMajorTicksPropertyValueCreator);
		
		public static BindableProperty DrawMajorGridLinesProperty = BindableProperty.Create("DrawMajorGridLines", typeof(bool), typeof(AxisCore), null, BindingMode.Default, null, OnDrawMajorGridLinesPropertyChanged, null, null, DefaultDrawMajorGridLinesPropertyValueCreator);
		
		public static BindableProperty DrawMinorGridLinesProperty = BindableProperty.Create("DrawMinorGridLines", typeof(bool), typeof(AxisCore), null, BindingMode.Default, null, OnDrawMinorGridLinesPropertyChanged, null, null, DefaultDrawMinorGridLinesPropertyValueCreator);
		
		public static BindableProperty DrawMajorBandsProperty = BindableProperty.Create("DrawMajorBands", typeof(bool), typeof(AxisCore), null, BindingMode.Default, null, OnDrawMajorBandsPropertyChanged, null, null, DefaultDrawMajorBandsPropertyValueCreator);
		
		public static BindableProperty AxisBandsFillProperty = BindableProperty.Create("AxisBandsFill", typeof(SciChart.Xamarin.Views.Drawing.IBrushStyle), typeof(AxisCore), null, BindingMode.Default, null, OnAxisBandsFillPropertyChanged, null, null, DefaultAxisBandsFillPropertyValueCreator);
		
		public static BindableProperty AutoRangeProperty = BindableProperty.Create("AutoRange", typeof(SciChart.Xamarin.Views.Visuals.Axes.AutoRange), typeof(AxisCore), null, BindingMode.Default, null, OnAutoRangePropertyChanged, null, null, DefaultAutoRangePropertyValueCreator);
		
		public static BindableProperty AxisIdProperty = BindableProperty.Create("AxisId", typeof(string), typeof(AxisCore), null, BindingMode.Default, null, OnAxisIdPropertyChanged, null, null, DefaultAxisIdPropertyValueCreator);
		
		public static BindableProperty VisibleRangeProperty = BindableProperty.Create("VisibleRange", typeof(SciChart.Xamarin.Views.Model.IRange), typeof(AxisCore), null, BindingMode.Default, null, OnVisibleRangePropertyChanged, null, null, DefaultVisibleRangePropertyValueCreator);
		
		public static BindableProperty GrowByProperty = BindableProperty.Create("GrowBy", typeof(SciChart.Xamarin.Views.Model.IRange), typeof(AxisCore), null, BindingMode.Default, null, OnGrowByPropertyChanged, null, null, DefaultGrowByPropertyValueCreator);
		
		public static BindableProperty VisibleRangeLimitModeProperty = BindableProperty.Create("VisibleRangeLimitMode", typeof(SciChart.Xamarin.Views.Model.RangeClipMode), typeof(AxisCore), null, BindingMode.Default, null, OnVisibleRangeLimitModePropertyChanged, null, null, DefaultVisibleRangeLimitModePropertyValueCreator);
		
		public static BindableProperty MinimalZoomConstrainProperty = BindableProperty.Create("MinimalZoomConstrain", typeof(System.IComparable), typeof(AxisCore), null, BindingMode.Default, null, OnMinimalZoomConstrainPropertyChanged, null, null, DefaultMinimalZoomConstrainPropertyValueCreator);
		
		public static BindableProperty MaximumZoomConstrainProperty = BindableProperty.Create("MaximumZoomConstrain", typeof(System.IComparable), typeof(AxisCore), null, BindingMode.Default, null, OnMaximumZoomConstrainPropertyChanged, null, null, DefaultMaximumZoomConstrainPropertyValueCreator);
		
		public static BindableProperty MajorDeltaProperty = BindableProperty.Create("MajorDelta", typeof(System.IComparable), typeof(AxisCore), null, BindingMode.Default, null, OnMajorDeltaPropertyChanged, null, null, DefaultMajorDeltaPropertyValueCreator);
		
		public static BindableProperty MinorDeltaProperty = BindableProperty.Create("MinorDelta", typeof(System.IComparable), typeof(AxisCore), null, BindingMode.Default, null, OnMinorDeltaPropertyChanged, null, null, DefaultMinorDeltaPropertyValueCreator);
		
		public static BindableProperty AutoTicksProperty = BindableProperty.Create("AutoTicks", typeof(bool), typeof(AxisCore), null, BindingMode.Default, null, OnAutoTicksPropertyChanged, null, null, DefaultAutoTicksPropertyValueCreator);
		
		public static BindableProperty MaxAutoTicksProperty = BindableProperty.Create("MaxAutoTicks", typeof(uint), typeof(AxisCore), null, BindingMode.Default, null, OnMaxAutoTicksPropertyChanged, null, null, DefaultMaxAutoTicksPropertyValueCreator);
		
		public static BindableProperty MinorsPerMajorProperty = BindableProperty.Create("MinorsPerMajor", typeof(uint), typeof(AxisCore), null, BindingMode.Default, null, OnMinorsPerMajorPropertyChanged, null, null, DefaultMinorsPerMajorPropertyValueCreator);
		
		private SciChart.Xamarin.Views.Core.Common.INativeSciChartObject _nativeSciChartObject;
		
		public AxisCore(SciChart.Xamarin.Views.Visuals.Axes.IAxisCore nativeObject)
		{
			_nativeSciChartObject = nativeObject.NativeSciChartObject;
		}
		
		public string AxisTitle
		{
			get
			{
				return ((string)(this.GetValue(AxisTitleProperty)));
			}
			set
			{
				this.SetValue(AxisTitleProperty, value);
			}
		}
		
		public bool FlipCoordinates
		{
			get
			{
				return ((bool)(this.GetValue(FlipCoordinatesProperty)));
			}
			set
			{
				this.SetValue(FlipCoordinatesProperty, value);
			}
		}
		
		public string TextFormatting
		{
			get
			{
				return ((string)(this.GetValue(TextFormattingProperty)));
			}
			set
			{
				this.SetValue(TextFormattingProperty, value);
			}
		}
		
		public bool DrawMinorTicks
		{
			get
			{
				return ((bool)(this.GetValue(DrawMinorTicksProperty)));
			}
			set
			{
				this.SetValue(DrawMinorTicksProperty, value);
			}
		}
		
		public bool DrawLabels
		{
			get
			{
				return ((bool)(this.GetValue(DrawLabelsProperty)));
			}
			set
			{
				this.SetValue(DrawLabelsProperty, value);
			}
		}
		
		public bool DrawMajorTicks
		{
			get
			{
				return ((bool)(this.GetValue(DrawMajorTicksProperty)));
			}
			set
			{
				this.SetValue(DrawMajorTicksProperty, value);
			}
		}
		
		public bool DrawMajorGridLines
		{
			get
			{
				return ((bool)(this.GetValue(DrawMajorGridLinesProperty)));
			}
			set
			{
				this.SetValue(DrawMajorGridLinesProperty, value);
			}
		}
		
		public bool DrawMinorGridLines
		{
			get
			{
				return ((bool)(this.GetValue(DrawMinorGridLinesProperty)));
			}
			set
			{
				this.SetValue(DrawMinorGridLinesProperty, value);
			}
		}
		
		public bool DrawMajorBands
		{
			get
			{
				return ((bool)(this.GetValue(DrawMajorBandsProperty)));
			}
			set
			{
				this.SetValue(DrawMajorBandsProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Drawing.IBrushStyle AxisBandsFill
		{
			get
			{
				return ((SciChart.Xamarin.Views.Drawing.IBrushStyle)(this.GetValue(AxisBandsFillProperty)));
			}
			set
			{
				this.SetValue(AxisBandsFillProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Visuals.Axes.AutoRange AutoRange
		{
			get
			{
				return ((SciChart.Xamarin.Views.Visuals.Axes.AutoRange)(this.GetValue(AutoRangeProperty)));
			}
			set
			{
				this.SetValue(AutoRangeProperty, value);
			}
		}
		
		public string AxisId
		{
			get
			{
				return ((string)(this.GetValue(AxisIdProperty)));
			}
			set
			{
				this.SetValue(AxisIdProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Model.IRange VisibleRange
		{
			get
			{
				return ((SciChart.Xamarin.Views.Model.IRange)(this.GetValue(VisibleRangeProperty)));
			}
			set
			{
				this.SetValue(VisibleRangeProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Model.IRange GrowBy
		{
			get
			{
				return ((SciChart.Xamarin.Views.Model.IRange)(this.GetValue(GrowByProperty)));
			}
			set
			{
				this.SetValue(GrowByProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Model.RangeClipMode VisibleRangeLimitMode
		{
			get
			{
				return ((SciChart.Xamarin.Views.Model.RangeClipMode)(this.GetValue(VisibleRangeLimitModeProperty)));
			}
			set
			{
				this.SetValue(VisibleRangeLimitModeProperty, value);
			}
		}
		
		public System.IComparable MinimalZoomConstrain
		{
			get
			{
				return ((System.IComparable)(this.GetValue(MinimalZoomConstrainProperty)));
			}
			set
			{
				this.SetValue(MinimalZoomConstrainProperty, value);
			}
		}
		
		public System.IComparable MaximumZoomConstrain
		{
			get
			{
				return ((System.IComparable)(this.GetValue(MaximumZoomConstrainProperty)));
			}
			set
			{
				this.SetValue(MaximumZoomConstrainProperty, value);
			}
		}
		
		public System.IComparable MajorDelta
		{
			get
			{
				return ((System.IComparable)(this.GetValue(MajorDeltaProperty)));
			}
			set
			{
				this.SetValue(MajorDeltaProperty, value);
			}
		}
		
		public System.IComparable MinorDelta
		{
			get
			{
				return ((System.IComparable)(this.GetValue(MinorDeltaProperty)));
			}
			set
			{
				this.SetValue(MinorDeltaProperty, value);
			}
		}
		
		public bool AutoTicks
		{
			get
			{
				return ((bool)(this.GetValue(AutoTicksProperty)));
			}
			set
			{
				this.SetValue(AutoTicksProperty, value);
			}
		}
		
		public uint MaxAutoTicks
		{
			get
			{
				return ((uint)(this.GetValue(MaxAutoTicksProperty)));
			}
			set
			{
				this.SetValue(MaxAutoTicksProperty, value);
			}
		}
		
		public uint MinorsPerMajor
		{
			get
			{
				return ((uint)(this.GetValue(MinorsPerMajorProperty)));
			}
			set
			{
				this.SetValue(MinorsPerMajorProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return _nativeSciChartObject;
			}
		}
		
		private static void OnAxisTitlePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AxisTitle = ((string)(newValue));
		}
		
		private static object DefaultAxisTitlePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AxisTitle;
		}
		
		private static void OnFlipCoordinatesPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().FlipCoordinates = ((bool)(newValue));
		}
		
		private static object DefaultFlipCoordinatesPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().FlipCoordinates;
		}
		
		private static void OnTextFormattingPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().TextFormatting = ((string)(newValue));
		}
		
		private static object DefaultTextFormattingPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().TextFormatting;
		}
		
		private static void OnDrawMinorTicksPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMinorTicks = ((bool)(newValue));
		}
		
		private static object DefaultDrawMinorTicksPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMinorTicks;
		}
		
		private static void OnDrawLabelsPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawLabels = ((bool)(newValue));
		}
		
		private static object DefaultDrawLabelsPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawLabels;
		}
		
		private static void OnDrawMajorTicksPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMajorTicks = ((bool)(newValue));
		}
		
		private static object DefaultDrawMajorTicksPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMajorTicks;
		}
		
		private static void OnDrawMajorGridLinesPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMajorGridLines = ((bool)(newValue));
		}
		
		private static object DefaultDrawMajorGridLinesPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMajorGridLines;
		}
		
		private static void OnDrawMinorGridLinesPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMinorGridLines = ((bool)(newValue));
		}
		
		private static object DefaultDrawMinorGridLinesPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMinorGridLines;
		}
		
		private static void OnDrawMajorBandsPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMajorBands = ((bool)(newValue));
		}
		
		private static object DefaultDrawMajorBandsPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().DrawMajorBands;
		}
		
		private static void OnAxisBandsFillPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AxisBandsFill = ((SciChart.Xamarin.Views.Drawing.IBrushStyle)(newValue));
		}
		
		private static object DefaultAxisBandsFillPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AxisBandsFill;
		}
		
		private static void OnAutoRangePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AutoRange = ((SciChart.Xamarin.Views.Visuals.Axes.AutoRange)(newValue));
		}
		
		private static object DefaultAutoRangePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AutoRange;
		}
		
		private static void OnAxisIdPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AxisId = ((string)(newValue));
		}
		
		private static object DefaultAxisIdPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AxisId;
		}
		
		private static void OnVisibleRangePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().VisibleRange = ((SciChart.Xamarin.Views.Model.IRange)(newValue));
		}
		
		private static object DefaultVisibleRangePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().VisibleRange;
		}
		
		private static void OnGrowByPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().GrowBy = ((SciChart.Xamarin.Views.Model.IRange)(newValue));
		}
		
		private static object DefaultGrowByPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().GrowBy;
		}
		
		private static void OnVisibleRangeLimitModePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().VisibleRangeLimitMode = ((SciChart.Xamarin.Views.Model.RangeClipMode)(newValue));
		}
		
		private static object DefaultVisibleRangeLimitModePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().VisibleRangeLimitMode;
		}
		
		private static void OnMinimalZoomConstrainPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().MinimalZoomConstrain = ((System.IComparable)(newValue));
		}
		
		private static object DefaultMinimalZoomConstrainPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().MinimalZoomConstrain;
		}
		
		private static void OnMaximumZoomConstrainPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().MaximumZoomConstrain = ((System.IComparable)(newValue));
		}
		
		private static object DefaultMaximumZoomConstrainPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().MaximumZoomConstrain;
		}
		
		private static void OnMajorDeltaPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().MajorDelta = ((System.IComparable)(newValue));
		}
		
		private static object DefaultMajorDeltaPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().MajorDelta;
		}
		
		private static void OnMinorDeltaPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().MinorDelta = ((System.IComparable)(newValue));
		}
		
		private static object DefaultMinorDeltaPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().MinorDelta;
		}
		
		private static void OnAutoTicksPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AutoTicks = ((bool)(newValue));
		}
		
		private static object DefaultAutoTicksPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().AutoTicks;
		}
		
		private static void OnMaxAutoTicksPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().MaxAutoTicks = ((uint)(newValue));
		}
		
		private static object DefaultMaxAutoTicksPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().MaxAutoTicks;
		}
		
		private static void OnMinorsPerMajorPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().MinorsPerMajor = ((uint)(newValue));
		}
		
		private static object DefaultMinorsPerMajorPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Axes.IAxisCore>().MinorsPerMajor;
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.Axes
{
	
	
	public partial class NumericAxis : AxisBase, SciChart.Xamarin.Views.Visuals.Axes.INumericAxis
	{
		
		public NumericAxis() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewNumericAxis())
		{
		}
		
		public NumericAxis(SciChart.Xamarin.Views.Visuals.Axes.INumericAxis nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.Axes3D
{
	
	
	public abstract partial class AxisBase3D : AxisCore, SciChart.Xamarin.Views.Visuals.Axes3D.IAxis3D
	{
		
		public AxisBase3D(SciChart.Xamarin.Views.Visuals.Axes3D.IAxis3D nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.Axes3D
{
	
	
	public partial class NumericAxis3D : AxisBase3D, SciChart.Xamarin.Views.Visuals.Axes3D.INumericAxis3D
	{
		
		public NumericAxis3D() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewNumericAxis3D())
		{
		}
		
		public NumericAxis3D(SciChart.Xamarin.Views.Visuals.Axes3D.INumericAxis3D nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.Annotations
{
	
	
	public abstract partial class AnnotationBase : View, SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation, SciChart.Xamarin.Views.Core.Common.IBindingContextProvider
	{
		
		public static BindableProperty X1Property = BindableProperty.Create("X1", typeof(System.IComparable), typeof(AnnotationBase), null, BindingMode.Default, null, OnX1PropertyChanged, null, null, DefaultX1PropertyValueCreator);
		
		public static BindableProperty X2Property = BindableProperty.Create("X2", typeof(System.IComparable), typeof(AnnotationBase), null, BindingMode.Default, null, OnX2PropertyChanged, null, null, DefaultX2PropertyValueCreator);
		
		public static BindableProperty Y1Property = BindableProperty.Create("Y1", typeof(System.IComparable), typeof(AnnotationBase), null, BindingMode.Default, null, OnY1PropertyChanged, null, null, DefaultY1PropertyValueCreator);
		
		public static BindableProperty Y2Property = BindableProperty.Create("Y2", typeof(System.IComparable), typeof(AnnotationBase), null, BindingMode.Default, null, OnY2PropertyChanged, null, null, DefaultY2PropertyValueCreator);
		
		public static BindableProperty XAxisIdProperty = BindableProperty.Create("XAxisId", typeof(string), typeof(AnnotationBase), null, BindingMode.Default, null, OnXAxisIdPropertyChanged, null, null, DefaultXAxisIdPropertyValueCreator);
		
		public static BindableProperty YAxisIdProperty = BindableProperty.Create("YAxisId", typeof(string), typeof(AnnotationBase), null, BindingMode.Default, null, OnYAxisIdPropertyChanged, null, null, DefaultYAxisIdPropertyValueCreator);
		
		public static BindableProperty IsEditableProperty = BindableProperty.Create("IsEditable", typeof(bool), typeof(AnnotationBase), null, BindingMode.Default, null, OnIsEditablePropertyChanged, null, null, DefaultIsEditablePropertyValueCreator);
		
		public static BindableProperty IsHiddenProperty = BindableProperty.Create("IsHidden", typeof(bool), typeof(AnnotationBase), null, BindingMode.Default, null, OnIsHiddenPropertyChanged, null, null, DefaultIsHiddenPropertyValueCreator);
		
		public static BindableProperty DragDirectionsProperty = BindableProperty.Create("DragDirections", typeof(SciChart.Xamarin.Views.Core.Common.Direction2D), typeof(AnnotationBase), null, BindingMode.Default, null, OnDragDirectionsPropertyChanged, null, null, DefaultDragDirectionsPropertyValueCreator);
		
		public static BindableProperty ResizeDirectionsProperty = BindableProperty.Create("ResizeDirections", typeof(SciChart.Xamarin.Views.Core.Common.Direction2D), typeof(AnnotationBase), null, BindingMode.Default, null, OnResizeDirectionsPropertyChanged, null, null, DefaultResizeDirectionsPropertyValueCreator);
		
		public static BindableProperty ZIndexProperty = BindableProperty.Create("ZIndex", typeof(int), typeof(AnnotationBase), null, BindingMode.Default, null, OnZIndexPropertyChanged, null, null, DefaultZIndexPropertyValueCreator);
		
		public static BindableProperty AnnotationSurfaceProperty = BindableProperty.Create("AnnotationSurface", typeof(SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface), typeof(AnnotationBase), null, BindingMode.Default, null, OnAnnotationSurfacePropertyChanged, null, null, DefaultAnnotationSurfacePropertyValueCreator);
		
		public static BindableProperty CoordinateModeProperty = BindableProperty.Create("CoordinateMode", typeof(SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode), typeof(AnnotationBase), null, BindingMode.Default, null, OnCoordinateModePropertyChanged, null, null, DefaultCoordinateModePropertyValueCreator);
		
		private SciChart.Xamarin.Views.Core.Common.INativeSciChartObject _nativeSciChartObject;
		
		public AnnotationBase(SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation nativeObject)
		{
			_nativeSciChartObject = nativeObject.NativeSciChartObject;
		}
		
		public System.IComparable X1
		{
			get
			{
				return ((System.IComparable)(this.GetValue(X1Property)));
			}
			set
			{
				this.SetValue(X1Property, value);
			}
		}
		
		public System.IComparable X2
		{
			get
			{
				return ((System.IComparable)(this.GetValue(X2Property)));
			}
			set
			{
				this.SetValue(X2Property, value);
			}
		}
		
		public System.IComparable Y1
		{
			get
			{
				return ((System.IComparable)(this.GetValue(Y1Property)));
			}
			set
			{
				this.SetValue(Y1Property, value);
			}
		}
		
		public System.IComparable Y2
		{
			get
			{
				return ((System.IComparable)(this.GetValue(Y2Property)));
			}
			set
			{
				this.SetValue(Y2Property, value);
			}
		}
		
		public string XAxisId
		{
			get
			{
				return ((string)(this.GetValue(XAxisIdProperty)));
			}
			set
			{
				this.SetValue(XAxisIdProperty, value);
			}
		}
		
		public string YAxisId
		{
			get
			{
				return ((string)(this.GetValue(YAxisIdProperty)));
			}
			set
			{
				this.SetValue(YAxisIdProperty, value);
			}
		}
		
		public bool IsEditable
		{
			get
			{
				return ((bool)(this.GetValue(IsEditableProperty)));
			}
			set
			{
				this.SetValue(IsEditableProperty, value);
			}
		}
		
		public bool IsHidden
		{
			get
			{
				return ((bool)(this.GetValue(IsHiddenProperty)));
			}
			set
			{
				this.SetValue(IsHiddenProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.Direction2D DragDirections
		{
			get
			{
				return ((SciChart.Xamarin.Views.Core.Common.Direction2D)(this.GetValue(DragDirectionsProperty)));
			}
			set
			{
				this.SetValue(DragDirectionsProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.Direction2D ResizeDirections
		{
			get
			{
				return ((SciChart.Xamarin.Views.Core.Common.Direction2D)(this.GetValue(ResizeDirectionsProperty)));
			}
			set
			{
				this.SetValue(ResizeDirectionsProperty, value);
			}
		}
		
		public int ZIndex
		{
			get
			{
				return ((int)(this.GetValue(ZIndexProperty)));
			}
			set
			{
				this.SetValue(ZIndexProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface AnnotationSurface
		{
			get
			{
				return ((SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface)(this.GetValue(AnnotationSurfaceProperty)));
			}
			set
			{
				this.SetValue(AnnotationSurfaceProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode CoordinateMode
		{
			get
			{
				return ((SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode)(this.GetValue(CoordinateModeProperty)));
			}
			set
			{
				this.SetValue(CoordinateModeProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return _nativeSciChartObject;
			}
		}
		
		private static void OnX1PropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().X1 = ((System.IComparable)(newValue));
		}
		
		private static object DefaultX1PropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().X1;
		}
		
		private static void OnX2PropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().X2 = ((System.IComparable)(newValue));
		}
		
		private static object DefaultX2PropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().X2;
		}
		
		private static void OnY1PropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().Y1 = ((System.IComparable)(newValue));
		}
		
		private static object DefaultY1PropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().Y1;
		}
		
		private static void OnY2PropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().Y2 = ((System.IComparable)(newValue));
		}
		
		private static object DefaultY2PropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().Y2;
		}
		
		private static void OnXAxisIdPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().XAxisId = ((string)(newValue));
		}
		
		private static object DefaultXAxisIdPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().XAxisId;
		}
		
		private static void OnYAxisIdPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().YAxisId = ((string)(newValue));
		}
		
		private static object DefaultYAxisIdPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().YAxisId;
		}
		
		private static void OnIsEditablePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().IsEditable = ((bool)(newValue));
		}
		
		private static object DefaultIsEditablePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().IsEditable;
		}
		
		private static void OnIsHiddenPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().IsHidden = ((bool)(newValue));
		}
		
		private static object DefaultIsHiddenPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().IsHidden;
		}
		
		private static void OnDragDirectionsPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().DragDirections = ((SciChart.Xamarin.Views.Core.Common.Direction2D)(newValue));
		}
		
		private static object DefaultDragDirectionsPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().DragDirections;
		}
		
		private static void OnResizeDirectionsPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().ResizeDirections = ((SciChart.Xamarin.Views.Core.Common.Direction2D)(newValue));
		}
		
		private static object DefaultResizeDirectionsPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().ResizeDirections;
		}
		
		private static void OnZIndexPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().ZIndex = ((int)(newValue));
		}
		
		private static object DefaultZIndexPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().ZIndex;
		}
		
		private static void OnAnnotationSurfacePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().AnnotationSurface = ((SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface)(newValue));
		}
		
		private static object DefaultAnnotationSurfacePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().AnnotationSurface;
		}
		
		private static void OnCoordinateModePropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().CoordinateMode = ((SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode)(newValue));
		}
		
		private static object DefaultCoordinateModePropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().CoordinateMode;
		}
		
		public void Show()
		{
			NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().Show();
		}
		
		public void Hide()
		{
			NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().Hide();
		}
		
		public void MoveBasePointTo(float xCoord, float yCoord, int index)
		{
			NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().MoveBasePointTo(xCoord, yCoord, index);
		}
		
		public void MoveAnnotation(float horizontalOffset, float verticalOffset)
		{
			NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Visuals.Annotations.IAnnotation>().MoveAnnotation(horizontalOffset, verticalOffset);
		}
	}
}
namespace SciChart.Xamarin.Views.Visuals.Annotations
{
	
	
	public partial class BoxAnnotation : AnnotationBase, SciChart.Xamarin.Views.Visuals.Annotations.IBoxAnnotation
	{
		
		public BoxAnnotation() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewBoxAnnotation())
		{
		}
		
		public BoxAnnotation(SciChart.Xamarin.Views.Visuals.Annotations.IBoxAnnotation nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Modifiers
{
	
	
	public abstract partial class ChartModifierBase : ChartModifierCore, SciChart.Xamarin.Views.Modifiers.IChartModifier
	{
		
		public ChartModifierBase(SciChart.Xamarin.Views.Modifiers.IChartModifier nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Modifiers
{
	
	
	public abstract partial class ChartModifierCore : View, SciChart.Xamarin.Views.Modifiers.IChartModifierCore, SciChart.Xamarin.Views.Core.Common.IBindingContextProvider
	{
		
		public static BindableProperty IsEnabledProperty = BindableProperty.Create("IsEnabled", typeof(bool), typeof(ChartModifierCore), null, BindingMode.Default, null, OnIsEnabledPropertyChanged, null, null, DefaultIsEnabledPropertyValueCreator);
		
		public static BindableProperty ReceiveHandledEventsProperty = BindableProperty.Create("ReceiveHandledEvents", typeof(bool), typeof(ChartModifierCore), null, BindingMode.Default, null, OnReceiveHandledEventsPropertyChanged, null, null, DefaultReceiveHandledEventsPropertyValueCreator);
		
		private SciChart.Xamarin.Views.Core.Common.INativeSciChartObject _nativeSciChartObject;
		
		public ChartModifierCore(SciChart.Xamarin.Views.Modifiers.IChartModifierCore nativeObject)
		{
			_nativeSciChartObject = nativeObject.NativeSciChartObject;
		}
		
		public bool IsEnabled
		{
			get
			{
				return ((bool)(this.GetValue(IsEnabledProperty)));
			}
			set
			{
				this.SetValue(IsEnabledProperty, value);
			}
		}
		
		public bool ReceiveHandledEvents
		{
			get
			{
				return ((bool)(this.GetValue(ReceiveHandledEventsProperty)));
			}
			set
			{
				this.SetValue(ReceiveHandledEventsProperty, value);
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return _nativeSciChartObject;
			}
		}
		
		private static void OnIsEnabledPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Modifiers.IChartModifierCore>().IsEnabled = ((bool)(newValue));
		}
		
		private static object DefaultIsEnabledPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Modifiers.IChartModifierCore>().IsEnabled;
		}
		
		private static void OnReceiveHandledEventsPropertyChanged(BindableObject bindable, object oldValue, object newValue)
		{
			bindable.CastBindableWrapper<SciChart.Xamarin.Views.Modifiers.IChartModifierCore>().ReceiveHandledEvents = ((bool)(newValue));
		}
		
		private static object DefaultReceiveHandledEventsPropertyValueCreator(BindableObject bindable)
		{
			return bindable.CastBindableWrapper<SciChart.Xamarin.Views.Modifiers.IChartModifierCore>().ReceiveHandledEvents;
		}
	}
}
namespace SciChart.Xamarin.Views.Modifiers
{
	
	
	public partial class ModifierGroup : ChartModifierBase, SciChart.Xamarin.Views.Modifiers.IModifierGroup
	{
		
		public ModifierGroup() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewModifierGroup())
		{
		}
		
		public ModifierGroup(SciChart.Xamarin.Views.Modifiers.IModifierGroup nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Modifiers
{
	
	
	public partial class PinchZoomModifier : ChartModifierBase, SciChart.Xamarin.Views.Modifiers.IPinchZoomModifier
	{
		
		public PinchZoomModifier() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewPinchZoomModifier())
		{
		}
		
		public PinchZoomModifier(SciChart.Xamarin.Views.Modifiers.IPinchZoomModifier nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Modifiers
{
	
	
	public partial class TooltipModifier : ChartModifierBase, SciChart.Xamarin.Views.Modifiers.ITooltipModifier
	{
		
		public TooltipModifier() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewTooltipModifier())
		{
		}
		
		public TooltipModifier(SciChart.Xamarin.Views.Modifiers.ITooltipModifier nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Modifiers
{
	
	
	public partial class ZoomExtentsModifier : ChartModifierBase, SciChart.Xamarin.Views.Modifiers.IZoomExtentsModifier
	{
		
		public ZoomExtentsModifier() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewZoomExtentsModifier())
		{
		}
		
		public ZoomExtentsModifier(SciChart.Xamarin.Views.Modifiers.IZoomExtentsModifier nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Modifiers
{
	
	
	public partial class ZoomPanModifier : ChartModifierBase, SciChart.Xamarin.Views.Modifiers.IZoomPanModifier
	{
		
		public ZoomPanModifier() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewZoomPanModifier())
		{
		}
		
		public ZoomPanModifier(SciChart.Xamarin.Views.Modifiers.IZoomPanModifier nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Model
{
	
	
	public partial class DoubleRange : RangeBase, SciChart.Xamarin.Views.Model.IDoubleRange
	{
		
		public DoubleRange() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewDoubleRange())
		{
		}
		
		public DoubleRange(double min, double max) : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewDoubleRange(min, max))
		{
		}
		
		public DoubleRange(SciChart.Xamarin.Views.Model.IDoubleRange nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Model.DataSeries
{
	
	
	public abstract partial class DataSeries : DataSeriesCore, SciChart.Xamarin.Views.Model.DataSeries.IDataSeries
	{
		
		public DataSeries(SciChart.Xamarin.Views.Model.DataSeries.IDataSeries nativeObject) : 
				base(nativeObject)
		{
		}
		
		public bool AcceptsUnsortedData
		{
			get
			{
				return NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IDataSeries>().AcceptsUnsortedData;
			}
			set
			{
				NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IDataSeries>().AcceptsUnsortedData = value;
			}
		}
	}
}
namespace SciChart.Xamarin.Views.Model.DataSeries
{
	
	
	public abstract partial class DataSeriesCore : SciChart.Xamarin.Views.Model.DataSeries.IDataSeriesCore
	{
		
		private SciChart.Xamarin.Views.Core.Common.INativeSciChartObject _nativeSciChartObject;
		
		public DataSeriesCore(SciChart.Xamarin.Views.Model.DataSeries.IDataSeriesCore nativeObject)
		{
			_nativeSciChartObject = nativeObject.NativeSciChartObject;
		}
		
		public string SeriesName
		{
			get
			{
				return NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IDataSeriesCore>().SeriesName;
			}
			set
			{
				NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IDataSeriesCore>().SeriesName = value;
			}
		}
		
		public int Count
		{
			get
			{
				return NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IDataSeriesCore>().Count;
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return _nativeSciChartObject;
			}
		}
		
		public void Clear()
		{
			NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IDataSeriesCore>().Clear();
		}
	}
}
namespace SciChart.Xamarin.Views.Model.DataSeries
{
	
	
	public partial class OhlcDataSeries<TX, TY> : DataSeries, SciChart.Xamarin.Views.Model.DataSeries.IOhlcDataSeries<TX,TY>
		where TX : System.IComparable
		where TY : System.IComparable
	{
		
		public OhlcDataSeries() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewOhlcDataSeries<TX, TY>())
		{
		}
		
		public OhlcDataSeries(SciChart.Xamarin.Views.Model.DataSeries.IOhlcDataSeries<TX,TY> nativeObject) : 
				base(nativeObject)
		{
		}
		
		public void Append(TX x, TY open, TY high, TY low, TY close)
		{
			NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IOhlcDataSeries<TX,TY>>().Append(x, open, high, low, close);
		}
	}
}
namespace SciChart.Xamarin.Views.Model.DataSeries
{
	
	
	public partial class XyDataSeries<TX, TY> : DataSeries, SciChart.Xamarin.Views.Model.DataSeries.IXyDataSeries<TX,TY>
		where TX : System.IComparable
		where TY : System.IComparable
	{
		
		public XyDataSeries() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewXyDataSeries<TX, TY>())
		{
		}
		
		public XyDataSeries(SciChart.Xamarin.Views.Model.DataSeries.IXyDataSeries<TX,TY> nativeObject) : 
				base(nativeObject)
		{
		}
		
		public void Append(TX x, TY y)
		{
			NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IXyDataSeries<TX,TY>>().Append(x, y);
		}
		
		public void Append(System.Collections.Generic.IEnumerable<TX> xValues, System.Collections.Generic.IEnumerable<TY> yValues)
		{
			NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries.IXyDataSeries<TX,TY>>().Append(xValues, yValues);
		}
	}
}
namespace SciChart.Xamarin.Views.Model.DataSeries3D
{
	
	
	public abstract partial class DataSeries3D : DataSeriesCore, SciChart.Xamarin.Views.Model.DataSeries3D.IDataSeries3D
	{
		
		public DataSeries3D(SciChart.Xamarin.Views.Model.DataSeries3D.IDataSeries3D nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Model.DataSeries3D
{
	
	
	public partial class XyzDataSeries3D<TX, TY, TZ> : DataSeries3D, SciChart.Xamarin.Views.Model.DataSeries3D.IXyzDataSeries3D<TX,TY,TZ>
		where TX : System.IComparable
		where TY : System.IComparable
		where TZ : System.IComparable
	{
		
		public XyzDataSeries3D() : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewXyzDataSeries3D<TX, TY, TZ>())
		{
		}
		
		public XyzDataSeries3D(SciChart.Xamarin.Views.Model.DataSeries3D.IXyzDataSeries3D<TX,TY,TZ> nativeObject) : 
				base(nativeObject)
		{
		}
		
		public void Append(TX x, TY y, TZ z)
		{
			NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries3D.IXyzDataSeries3D<TX,TY,TZ>>().Append(x, y, z);
		}
		
		public void Append(System.Collections.Generic.IEnumerable<TX> xValues, System.Collections.Generic.IEnumerable<TY> yValues, System.Collections.Generic.IEnumerable<TZ> zValues)
		{
			NativeSciChartObject.CastSciChartObject<SciChart.Xamarin.Views.Model.DataSeries3D.IXyzDataSeries3D<TX,TY,TZ>>().Append(xValues, yValues, zValues);
		}
	}
}
namespace SciChart.Xamarin.Views.Drawing
{
	
	
	public abstract partial class BrushStyle : SciChart.Xamarin.Views.Drawing.IBrushStyle
	{
		
		private SciChart.Xamarin.Views.Core.Common.INativeSciChartObject _nativeSciChartObject;
		
		public BrushStyle(SciChart.Xamarin.Views.Drawing.IBrushStyle nativeObject)
		{
			_nativeSciChartObject = nativeObject.NativeSciChartObject;
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return _nativeSciChartObject;
			}
		}
	}
}
namespace SciChart.Xamarin.Views.Drawing
{
	
	
	public partial class FontStyle : SciChart.Xamarin.Views.Drawing.IFontStyle
	{
		
		private SciChart.Xamarin.Views.Core.Common.INativeSciChartObject _nativeSciChartObject;
		
		public FontStyle(float textSize, XFColor textColor) : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewFontStyle(textSize, textColor))
		{
		}
		
		public FontStyle(SciChart.Xamarin.Views.Drawing.IFontStyle nativeObject)
		{
			_nativeSciChartObject = nativeObject.NativeSciChartObject;
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return _nativeSciChartObject;
			}
		}
	}
}
namespace SciChart.Xamarin.Views.Drawing
{
	
	
	public partial class LinearGradientBrushStyle : BrushStyle, SciChart.Xamarin.Views.Drawing.ILinearGradientBrushStyle
	{
		
		public LinearGradientBrushStyle(float x1, float y1, float x2, float y2, XFColor startColor, XFColor endColor) : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewLinearGradientBrushStyle(x1, y1, x2, y2, startColor, endColor))
		{
		}
		
		public LinearGradientBrushStyle(SciChart.Xamarin.Views.Drawing.ILinearGradientBrushStyle nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Drawing
{
	
	
	public abstract partial class PenStyle : SciChart.Xamarin.Views.Drawing.IPenStyle
	{
		
		private SciChart.Xamarin.Views.Core.Common.INativeSciChartObject _nativeSciChartObject;
		
		public PenStyle(SciChart.Xamarin.Views.Drawing.IPenStyle nativeObject)
		{
			_nativeSciChartObject = nativeObject.NativeSciChartObject;
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return _nativeSciChartObject;
			}
		}
	}
}
namespace SciChart.Xamarin.Views.Drawing
{
	
	
	public partial class SolidBrushStyle : BrushStyle, SciChart.Xamarin.Views.Drawing.ISolidBrushStyle
	{
		
		public SolidBrushStyle(XFColor color) : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewSolidBrushStyle(color))
		{
		}
		
		public SolidBrushStyle(SciChart.Xamarin.Views.Drawing.ISolidBrushStyle nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
namespace SciChart.Xamarin.Views.Drawing
{
	
	
	public partial class SolidPenStyle : PenStyle, SciChart.Xamarin.Views.Drawing.ISolidPenStyle
	{
		
		public SolidPenStyle(XFColor color, float thickness, bool antiAliasing, float[] strokeDashArray) : 
				this(DependencyService.Get<INativeSciChartObjectFactory>().NewSolidPenStyle(color, thickness, antiAliasing, strokeDashArray))
		{
		}
		
		public SolidPenStyle(SciChart.Xamarin.Views.Drawing.ISolidPenStyle nativeObject) : 
				base(nativeObject)
		{
		}
	}
}
