//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Xamarin.Forms;


namespace SciChart.Xamarin.iOS.Renderer
{
	using SciChart.iOS.Charting;
	using SciChart.Xamarin.iOS.Renderer.Utility;
	
	
	public partial class FastCandlestickRenderableSeriesiOS : SCIFastCandlestickRenderableSeries, SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastCandlestickRenderableSeries, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public FastCandlestickRenderableSeriesiOS()
		{
		}
		
		public new SciChart.Xamarin.Views.Drawing.IBrushStyle FillDownBrushStyle
		{
			get
			{
				return base.FillDownBrushStyle.BrushStyleToXamarin();
			}
			set
			{
				base.FillDownBrushStyle = value.BrushStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Drawing.IBrushStyle FillUpBrushStyle
		{
			get
			{
				return base.FillUpBrushStyle.BrushStyleToXamarin();
			}
			set
			{
				base.FillUpBrushStyle = value.BrushStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle StrokeDownStyle
		{
			get
			{
				return base.StrokeDownStyle.PenStyleToXamarin();
			}
			set
			{
				base.StrokeDownStyle = value.PenStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle StrokeUpStyle
		{
			get
			{
				return base.StrokeUpStyle.PenStyleToXamarin();
			}
			set
			{
				base.StrokeUpStyle = value.PenStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.DataSeries.IDataSeries DataSeries
		{
			get
			{
				return base.DataSeries.DataSeriesToXamarin();
			}
			set
			{
				base.DataSeries = value.DataSeriesFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle StrokeStyle
		{
			get
			{
				return base.StrokeStyle.PenStyleToXamarin();
			}
			set
			{
				base.StrokeStyle = value.PenStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker PointMarker
		{
			get
			{
				return base.PointMarker.PointMarkerToXamarin();
			}
			set
			{
				base.PointMarker = value.PointMarkerFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class FastLineRenderableSeriesiOS : SCIFastLineRenderableSeries, SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastLineRenderableSeries, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public FastLineRenderableSeriesiOS()
		{
		}
		
		public new SciChart.Xamarin.Views.Model.DataSeries.IDataSeries DataSeries
		{
			get
			{
				return base.DataSeries.DataSeriesToXamarin();
			}
			set
			{
				base.DataSeries = value.DataSeriesFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle StrokeStyle
		{
			get
			{
				return base.StrokeStyle.PenStyleToXamarin();
			}
			set
			{
				base.StrokeStyle = value.PenStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker PointMarker
		{
			get
			{
				return base.PointMarker.PointMarkerToXamarin();
			}
			set
			{
				base.PointMarker = value.PointMarkerFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class ScatterRenderableSeries3DiOS : SCIScatterRenderableSeries3D, SciChart.Xamarin.Views.Visuals.RenderableSeries3D.IScatterRenderableSeries3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public ScatterRenderableSeries3DiOS()
		{
		}
		
		public new SciChart.Xamarin.Views.Model.DataSeries3D.IDataSeries3D DataSeries
		{
			get
			{
				return base.DataSeries.DataSeriesToXamarin();
			}
			set
			{
				base.DataSeries = value.DataSeriesFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.PointMarkers3D.IPointMarker3D PointMarker
		{
			get
			{
				return base.PointMarker.PointMarker3DToXamarin();
			}
			set
			{
				base.PointMarker = value.PointMarker3DFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class EllipsePointMarkeriOS : SCIEllipsePointMarker, SciChart.Xamarin.Views.Visuals.PointMarkers.IEllipsePointMarker, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public EllipsePointMarkeriOS()
		{
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle StrokeStyle
		{
			get
			{
				return base.StrokeStyle.PenStyleToXamarin();
			}
			set
			{
				base.StrokeStyle = value.PenStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Drawing.IBrushStyle FillStyle
		{
			get
			{
				return base.FillStyle.BrushStyleToXamarin();
			}
			set
			{
				base.FillStyle = value.BrushStyleFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class EllipsePointMarker3DiOS : SCIEllipsePointMarker3D, SciChart.Xamarin.Views.Visuals.PointMarkers3D.IEllipsePointMarker3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public EllipsePointMarker3DiOS()
		{
		}
		
		public Color Fill
		{
			get
			{
				return base.FillColor.ColorToXamarin();
			}
			set
			{
				base.FillColor = value.ColorFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class CategoryDateAxisiOS : SCICategoryDateAxis, SciChart.Xamarin.Views.Visuals.Axes.ICategoryDateTimeAxis, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public CategoryDateAxisiOS()
		{
		}
		
		public new SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment AxisAlignment
		{
			get
			{
				return base.AxisAlignment.AxisAlignmentToXamarin();
			}
			set
			{
				base.AxisAlignment = value.AxisAlignmentFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Drawing.IBrushStyle AxisBandsFill
		{
			get
			{
				return base.AxisBandsStyle.BrushStyleToXamarin();
			}
			set
			{
				base.AxisBandsStyle = value.BrushStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Axes.AutoRange AutoRange
		{
			get
			{
				return base.AutoRange.AutoRangeToXamarin();
			}
			set
			{
				base.AutoRange = value.AutoRangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.IRange VisibleRange
		{
			get
			{
				return base.VisibleRange.RangeToXamarin();
			}
			set
			{
				base.VisibleRange = value.RangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.IRange GrowBy
		{
			get
			{
				return base.GrowBy.RangeToXamarin();
			}
			set
			{
				base.GrowBy = value.RangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.RangeClipMode VisibleRangeLimitMode
		{
			get
			{
				return base.VisibleRangeLimitMode.RangeClipModeToXamarin();
			}
			set
			{
				base.VisibleRangeLimitMode = value.RangeClipModeFromXamarin();
			}
		}
		
		public new System.IComparable MinimalZoomConstrain
		{
			get
			{
				return base.MinimalZoomConstrain.ComparableToXamarin();
			}
			set
			{
				base.MinimalZoomConstrain = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MaximumZoomConstrain
		{
			get
			{
				return base.MaximumZoomConstrain.ComparableToXamarin();
			}
			set
			{
				base.MaximumZoomConstrain = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MajorDelta
		{
			get
			{
				return base.MajorDelta.ComparableToXamarin();
			}
			set
			{
				base.MajorDelta = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MinorDelta
		{
			get
			{
				return base.MinorDelta.ComparableToXamarin();
			}
			set
			{
				base.MinorDelta = value.ComparableFromXamarin();
			}
		}
		
		public new uint MaxAutoTicks
		{
			get
			{
				return base.MaxAutoTicks.UIntToXamarin();
			}
			set
			{
				base.MaxAutoTicks = value.UIntFromXamarin();
			}
		}
		
		public new uint MinorsPerMajor
		{
			get
			{
				return base.MinorsPerMajor.UIntToXamarin();
			}
			set
			{
				base.MinorsPerMajor = value.UIntFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class NumericAxisiOS : SCINumericAxis, SciChart.Xamarin.Views.Visuals.Axes.INumericAxis, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public NumericAxisiOS()
		{
		}
		
		public new SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment AxisAlignment
		{
			get
			{
				return base.AxisAlignment.AxisAlignmentToXamarin();
			}
			set
			{
				base.AxisAlignment = value.AxisAlignmentFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Drawing.IBrushStyle AxisBandsFill
		{
			get
			{
				return base.AxisBandsStyle.BrushStyleToXamarin();
			}
			set
			{
				base.AxisBandsStyle = value.BrushStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Axes.AutoRange AutoRange
		{
			get
			{
				return base.AutoRange.AutoRangeToXamarin();
			}
			set
			{
				base.AutoRange = value.AutoRangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.IRange VisibleRange
		{
			get
			{
				return base.VisibleRange.RangeToXamarin();
			}
			set
			{
				base.VisibleRange = value.RangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.IRange GrowBy
		{
			get
			{
				return base.GrowBy.RangeToXamarin();
			}
			set
			{
				base.GrowBy = value.RangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.RangeClipMode VisibleRangeLimitMode
		{
			get
			{
				return base.VisibleRangeLimitMode.RangeClipModeToXamarin();
			}
			set
			{
				base.VisibleRangeLimitMode = value.RangeClipModeFromXamarin();
			}
		}
		
		public new System.IComparable MinimalZoomConstrain
		{
			get
			{
				return base.MinimalZoomConstrain.ComparableToXamarin();
			}
			set
			{
				base.MinimalZoomConstrain = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MaximumZoomConstrain
		{
			get
			{
				return base.MaximumZoomConstrain.ComparableToXamarin();
			}
			set
			{
				base.MaximumZoomConstrain = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MajorDelta
		{
			get
			{
				return base.MajorDelta.ComparableToXamarin();
			}
			set
			{
				base.MajorDelta = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MinorDelta
		{
			get
			{
				return base.MinorDelta.ComparableToXamarin();
			}
			set
			{
				base.MinorDelta = value.ComparableFromXamarin();
			}
		}
		
		public new uint MaxAutoTicks
		{
			get
			{
				return base.MaxAutoTicks.UIntToXamarin();
			}
			set
			{
				base.MaxAutoTicks = value.UIntFromXamarin();
			}
		}
		
		public new uint MinorsPerMajor
		{
			get
			{
				return base.MinorsPerMajor.UIntToXamarin();
			}
			set
			{
				base.MinorsPerMajor = value.UIntFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class NumericAxis3DiOS : SCINumericAxis3D, SciChart.Xamarin.Views.Visuals.Axes3D.INumericAxis3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public NumericAxis3DiOS()
		{
		}
		
		public SciChart.Xamarin.Views.Drawing.IBrushStyle AxisBandsFill
		{
			get
			{
				return base.AxisBandsStyle.BrushStyleToXamarin();
			}
			set
			{
				base.AxisBandsStyle = value.BrushStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Axes.AutoRange AutoRange
		{
			get
			{
				return base.AutoRange.AutoRangeToXamarin();
			}
			set
			{
				base.AutoRange = value.AutoRangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.IRange VisibleRange
		{
			get
			{
				return base.VisibleRange.RangeToXamarin();
			}
			set
			{
				base.VisibleRange = value.RangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.IRange GrowBy
		{
			get
			{
				return base.GrowBy.RangeToXamarin();
			}
			set
			{
				base.GrowBy = value.RangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.RangeClipMode VisibleRangeLimitMode
		{
			get
			{
				return base.VisibleRangeLimitMode.RangeClipModeToXamarin();
			}
			set
			{
				base.VisibleRangeLimitMode = value.RangeClipModeFromXamarin();
			}
		}
		
		public new System.IComparable MinimalZoomConstrain
		{
			get
			{
				return base.MinimalZoomConstrain.ComparableToXamarin();
			}
			set
			{
				base.MinimalZoomConstrain = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MaximumZoomConstrain
		{
			get
			{
				return base.MaximumZoomConstrain.ComparableToXamarin();
			}
			set
			{
				base.MaximumZoomConstrain = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MajorDelta
		{
			get
			{
				return base.MajorDelta.ComparableToXamarin();
			}
			set
			{
				base.MajorDelta = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MinorDelta
		{
			get
			{
				return base.MinorDelta.ComparableToXamarin();
			}
			set
			{
				base.MinorDelta = value.ComparableFromXamarin();
			}
		}
		
		public new uint MaxAutoTicks
		{
			get
			{
				return base.MaxAutoTicks.UIntToXamarin();
			}
			set
			{
				base.MaxAutoTicks = value.UIntFromXamarin();
			}
		}
		
		public new uint MinorsPerMajor
		{
			get
			{
				return base.MinorsPerMajor.UIntToXamarin();
			}
			set
			{
				base.MinorsPerMajor = value.UIntFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class AxisMarkerAnnotationiOS : SCIAxisMarkerAnnotation, SciChart.Xamarin.Views.Visuals.Annotations.IAxisMarkerAnnotation, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public AxisMarkerAnnotationiOS()
		{
		}
		
		public new SciChart.Xamarin.Views.Drawing.IFontStyle FontStyle
		{
			get
			{
				return base.FontStyle.FontStyleToXamarin();
			}
			set
			{
				base.FontStyle = value.FontStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint HorizontalAnchorPoint
		{
			get
			{
				return base.HorizontalAnchorPoint.HorizontalAnchorPointToXamarin();
			}
			set
			{
				base.HorizontalAnchorPoint = value.HorizontalAnchorPointFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint VerticalAnchorPoint
		{
			get
			{
				return base.VerticalAnchorPoint.VerticalAnchorPointToXamarin();
			}
			set
			{
				base.VerticalAnchorPoint = value.VerticalAnchorPointFromXamarin();
			}
		}
		
		public System.IComparable X1
		{
			get
			{
				return base.X1Value;
			}
			set
			{
				base.X1Value = value;
			}
		}
		
		public System.IComparable X2
		{
			get
			{
				return base.X2Value;
			}
			set
			{
				base.X2Value = value;
			}
		}
		
		public System.IComparable Y1
		{
			get
			{
				return base.Y1Value;
			}
			set
			{
				base.Y1Value = value;
			}
		}
		
		public System.IComparable Y2
		{
			get
			{
				return base.Y2Value;
			}
			set
			{
				base.Y2Value = value;
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D DragDirections
		{
			get
			{
				return base.DragDirections.Direction2DToXamarin();
			}
			set
			{
				base.DragDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D ResizeDirections
		{
			get
			{
				return base.ResizeDirections.Direction2DToXamarin();
			}
			set
			{
				base.ResizeDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface AnnotationSurface
		{
			get
			{
				return base.AnnotationSurface.AnnotationSurfaceToXamarin();
			}
			set
			{
				base.AnnotationSurface = value.AnnotationSurfaceFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode CoordinateMode
		{
			get
			{
				return base.CoordinateMode.AnnotationCoordinateModeToXamarin();
			}
			set
			{
				base.CoordinateMode = value.AnnotationCoordinateModeFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class BoxAnnotationiOS : SCIBoxAnnotation, SciChart.Xamarin.Views.Visuals.Annotations.IBoxAnnotation, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public BoxAnnotationiOS()
		{
		}
		
		public System.IComparable X1
		{
			get
			{
				return base.X1Value;
			}
			set
			{
				base.X1Value = value;
			}
		}
		
		public System.IComparable X2
		{
			get
			{
				return base.X2Value;
			}
			set
			{
				base.X2Value = value;
			}
		}
		
		public System.IComparable Y1
		{
			get
			{
				return base.Y1Value;
			}
			set
			{
				base.Y1Value = value;
			}
		}
		
		public System.IComparable Y2
		{
			get
			{
				return base.Y2Value;
			}
			set
			{
				base.Y2Value = value;
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D DragDirections
		{
			get
			{
				return base.DragDirections.Direction2DToXamarin();
			}
			set
			{
				base.DragDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D ResizeDirections
		{
			get
			{
				return base.ResizeDirections.Direction2DToXamarin();
			}
			set
			{
				base.ResizeDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface AnnotationSurface
		{
			get
			{
				return base.AnnotationSurface.AnnotationSurfaceToXamarin();
			}
			set
			{
				base.AnnotationSurface = value.AnnotationSurfaceFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode CoordinateMode
		{
			get
			{
				return base.CoordinateMode.AnnotationCoordinateModeToXamarin();
			}
			set
			{
				base.CoordinateMode = value.AnnotationCoordinateModeFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class LineAnnotationiOS : SCILineAnnotation, SciChart.Xamarin.Views.Visuals.Annotations.ILineAnnotation, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public LineAnnotationiOS()
		{
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle Stroke
		{
			get
			{
				return base.Stroke.PenStyleToXamarin();
			}
			set
			{
				base.Stroke = value.PenStyleFromXamarin();
			}
		}
		
		public System.IComparable X1
		{
			get
			{
				return base.X1Value;
			}
			set
			{
				base.X1Value = value;
			}
		}
		
		public System.IComparable X2
		{
			get
			{
				return base.X2Value;
			}
			set
			{
				base.X2Value = value;
			}
		}
		
		public System.IComparable Y1
		{
			get
			{
				return base.Y1Value;
			}
			set
			{
				base.Y1Value = value;
			}
		}
		
		public System.IComparable Y2
		{
			get
			{
				return base.Y2Value;
			}
			set
			{
				base.Y2Value = value;
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D DragDirections
		{
			get
			{
				return base.DragDirections.Direction2DToXamarin();
			}
			set
			{
				base.DragDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D ResizeDirections
		{
			get
			{
				return base.ResizeDirections.Direction2DToXamarin();
			}
			set
			{
				base.ResizeDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface AnnotationSurface
		{
			get
			{
				return base.AnnotationSurface.AnnotationSurfaceToXamarin();
			}
			set
			{
				base.AnnotationSurface = value.AnnotationSurfaceFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode CoordinateMode
		{
			get
			{
				return base.CoordinateMode.AnnotationCoordinateModeToXamarin();
			}
			set
			{
				base.CoordinateMode = value.AnnotationCoordinateModeFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class LineArrowAnnotationiOS : SCILineArrowAnnotation, SciChart.Xamarin.Views.Visuals.Annotations.ILineArrowAnnotation, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public LineArrowAnnotationiOS()
		{
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle Stroke
		{
			get
			{
				return base.Stroke.PenStyleToXamarin();
			}
			set
			{
				base.Stroke = value.PenStyleFromXamarin();
			}
		}
		
		public System.IComparable X1
		{
			get
			{
				return base.X1Value;
			}
			set
			{
				base.X1Value = value;
			}
		}
		
		public System.IComparable X2
		{
			get
			{
				return base.X2Value;
			}
			set
			{
				base.X2Value = value;
			}
		}
		
		public System.IComparable Y1
		{
			get
			{
				return base.Y1Value;
			}
			set
			{
				base.Y1Value = value;
			}
		}
		
		public System.IComparable Y2
		{
			get
			{
				return base.Y2Value;
			}
			set
			{
				base.Y2Value = value;
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D DragDirections
		{
			get
			{
				return base.DragDirections.Direction2DToXamarin();
			}
			set
			{
				base.DragDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D ResizeDirections
		{
			get
			{
				return base.ResizeDirections.Direction2DToXamarin();
			}
			set
			{
				base.ResizeDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface AnnotationSurface
		{
			get
			{
				return base.AnnotationSurface.AnnotationSurfaceToXamarin();
			}
			set
			{
				base.AnnotationSurface = value.AnnotationSurfaceFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode CoordinateMode
		{
			get
			{
				return base.CoordinateMode.AnnotationCoordinateModeToXamarin();
			}
			set
			{
				base.CoordinateMode = value.AnnotationCoordinateModeFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class TextAnnotationiOS : SCITextAnnotation, SciChart.Xamarin.Views.Visuals.Annotations.ITextAnnotation, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public TextAnnotationiOS()
		{
		}
		
		public new SciChart.Xamarin.Views.Drawing.IFontStyle FontStyle
		{
			get
			{
				return base.FontStyle.FontStyleToXamarin();
			}
			set
			{
				base.FontStyle = value.FontStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint HorizontalAnchorPoint
		{
			get
			{
				return base.HorizontalAnchorPoint.HorizontalAnchorPointToXamarin();
			}
			set
			{
				base.HorizontalAnchorPoint = value.HorizontalAnchorPointFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint VerticalAnchorPoint
		{
			get
			{
				return base.VerticalAnchorPoint.VerticalAnchorPointToXamarin();
			}
			set
			{
				base.VerticalAnchorPoint = value.VerticalAnchorPointFromXamarin();
			}
		}
		
		public System.IComparable X1
		{
			get
			{
				return base.X1Value;
			}
			set
			{
				base.X1Value = value;
			}
		}
		
		public System.IComparable X2
		{
			get
			{
				return base.X2Value;
			}
			set
			{
				base.X2Value = value;
			}
		}
		
		public System.IComparable Y1
		{
			get
			{
				return base.Y1Value;
			}
			set
			{
				base.Y1Value = value;
			}
		}
		
		public System.IComparable Y2
		{
			get
			{
				return base.Y2Value;
			}
			set
			{
				base.Y2Value = value;
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D DragDirections
		{
			get
			{
				return base.DragDirections.Direction2DToXamarin();
			}
			set
			{
				base.DragDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D ResizeDirections
		{
			get
			{
				return base.ResizeDirections.Direction2DToXamarin();
			}
			set
			{
				base.ResizeDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface AnnotationSurface
		{
			get
			{
				return base.AnnotationSurface.AnnotationSurfaceToXamarin();
			}
			set
			{
				base.AnnotationSurface = value.AnnotationSurfaceFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode CoordinateMode
		{
			get
			{
				return base.CoordinateMode.AnnotationCoordinateModeToXamarin();
			}
			set
			{
				base.CoordinateMode = value.AnnotationCoordinateModeFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class LegendModifieriOS : SCILegendModifier, SciChart.Xamarin.Views.Modifiers.ILegendModifier, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public LegendModifieriOS()
		{
		}
		
		public LegendModifieriOS(SciChart.iOS.Charting.SCIChartLegend legend) : 
				base(legend)
		{
		}
		
		public LegendModifieriOS(SciChart.iOS.Charting.SCIChartLegend legend, SciChart.iOS.Charting.SCILegendDataSource dataSource, bool useAutoPlacement) : 
				base(legend, dataSource, useAutoPlacement)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class ModifierGroupiOS : SCIModifierGroup, SciChart.Xamarin.Views.Modifiers.IModifierGroup, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public ModifierGroupiOS()
		{
		}
		
		public ModifierGroupiOS(SciChart.iOS.Charting.IISCIChartModifier[] childModifiers) : 
				base(childModifiers)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class ModifierGroup3DiOS : SCIModifierGroup3D, SciChart.Xamarin.Views.Modifiers.IModifierGroup3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public ModifierGroup3DiOS()
		{
		}
		
		public ModifierGroup3DiOS(SciChart.iOS.Charting.IISCIChartModifier3D[] childModifiers) : 
				base(childModifiers)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class OrbitModifier3DiOS : SCIOrbitModifier3D, SciChart.Xamarin.Views.Modifiers.IOrbitModifier3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public OrbitModifier3DiOS()
		{
		}
		
		public OrbitModifier3DiOS(System.nuint defaultNumberOfTouches) : 
				base(defaultNumberOfTouches)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class PinchZoomModifieriOS : SCIPinchZoomModifier, SciChart.Xamarin.Views.Modifiers.IPinchZoomModifier, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public PinchZoomModifieriOS()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class PinchZoomModifier3DiOS : SCIPinchZoomModifier3D, SciChart.Xamarin.Views.Modifiers.IPinchZoomModifier3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public PinchZoomModifier3DiOS()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class TooltipModifieriOS : SCITooltipModifier, SciChart.Xamarin.Views.Modifiers.ITooltipModifier, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public TooltipModifieriOS()
		{
		}
		
		public TooltipModifieriOS(SciChart.iOS.Charting.SCICrossDrawableBehavior crossDrawableBehavior) : 
				base(crossDrawableBehavior)
		{
		}
		
		public TooltipModifieriOS(SciChart.iOS.Charting.SCICrossDrawableBehavior crossDrawableBehavior, SciChart.iOS.Charting.IISCITooltipContainer tooltipContainer) : 
				base(crossDrawableBehavior, tooltipContainer)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class ZoomExtentsModifieriOS : SCIZoomExtentsModifier, SciChart.Xamarin.Views.Modifiers.IZoomExtentsModifier, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public ZoomExtentsModifieriOS()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class ZoomExtentsModifier3DiOS : SCIZoomExtentsModifier3D, SciChart.Xamarin.Views.Modifiers.IZoomExtentsModifier3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public ZoomExtentsModifier3DiOS()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class ZoomPanModifieriOS : SCIZoomPanModifier, SciChart.Xamarin.Views.Modifiers.IZoomPanModifier, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public ZoomPanModifieriOS()
		{
		}
		
		public ZoomPanModifieriOS(System.nuint defaultNumberOfTouches) : 
				base(defaultNumberOfTouches)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class DoubleRangeiOS : SCIDoubleRange, SciChart.Xamarin.Views.Model.IDoubleRange, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public DoubleRangeiOS()
		{
		}
		
		public DoubleRangeiOS(double min, double max) : 
				base(min, max)
		{
		}
		
		public DoubleRangeiOS(SciChart.iOS.Charting.SCIDoubleRange range) : 
				base(range)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class OhlcDataSeriesiOS<TX, TY> : OhlcDataSeries<TX,TY>, SciChart.Xamarin.Views.Model.DataSeries.IOhlcDataSeries<TX,TY>, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
		where TX : System.IComparable
		where TY : System.IComparable
	{
		
		public OhlcDataSeriesiOS()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class XyDataSeriesiOS<TX, TY> : XyDataSeries<TX,TY>, SciChart.Xamarin.Views.Model.DataSeries.IXyDataSeries<TX,TY>, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
		where TX : System.IComparable
		where TY : System.IComparable
	{
		
		public XyDataSeriesiOS()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class XyzDataSeries3DiOS<TX, TY, TZ> : XyzDataSeries3D<TX,TY,TZ>, SciChart.Xamarin.Views.Model.DataSeries3D.IXyzDataSeries3D<TX,TY,TZ>, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
		where TX : System.IComparable
		where TY : System.IComparable
		where TZ : System.IComparable
	{
		
		public XyzDataSeries3DiOS()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class FontStyleiOS : SCIFontStyle, SciChart.Xamarin.Views.Drawing.IFontStyle, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public FontStyleiOS()
		{
		}
		
		public FontStyleiOS(float fontSize, UIKit.UIColor textColor) : 
				base(fontSize, textColor)
		{
		}
		
		public FontStyleiOS(float fontSize, uint textColor) : 
				base(fontSize, textColor)
		{
		}
		
		public FontStyleiOS(string fontName, float fontSize, UIKit.UIColor textColor) : 
				base(fontName, fontSize, textColor)
		{
		}
		
		public FontStyleiOS(string fontName, float fontSize, uint textColor) : 
				base(fontName, fontSize, textColor)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class LinearGradientBrushStyleiOS : SCILinearGradientBrushStyle, SciChart.Xamarin.Views.Drawing.ILinearGradientBrushStyle, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public LinearGradientBrushStyleiOS(uint[] colors, float[] stops) : 
				base(colors, stops)
		{
		}
		
		public LinearGradientBrushStyleiOS(CoreGraphics.CGPoint start, CoreGraphics.CGPoint end, uint[] colors, float[] stops) : 
				base(start, end, colors, stops)
		{
		}
		
		public LinearGradientBrushStyleiOS()
		{
		}
		
		public LinearGradientBrushStyleiOS(UIKit.UIColor startColor, UIKit.UIColor endColor) : 
				base(startColor, endColor)
		{
		}
		
		public LinearGradientBrushStyleiOS(CoreGraphics.CGPoint start, CoreGraphics.CGPoint end, UIKit.UIColor startColor, UIKit.UIColor endColor) : 
				base(start, end, startColor, endColor)
		{
		}
		
		public LinearGradientBrushStyleiOS(uint startColor, uint endColor) : 
				base(startColor, endColor)
		{
		}
		
		public LinearGradientBrushStyleiOS(CoreGraphics.CGPoint start, CoreGraphics.CGPoint end, uint startColor, uint endColor) : 
				base(start, end, startColor, endColor)
		{
		}
		
		public LinearGradientBrushStyleiOS(CoreGraphics.CGPoint start, CoreGraphics.CGPoint end, SciChart.iOS.Charting.SCIUnsignedIntegerValues colors, SciChart.iOS.Charting.SCIFloatValues stops) : 
				base(start, end, colors, stops)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class SolidBrushStyleiOS : SCISolidBrushStyle, SciChart.Xamarin.Views.Drawing.ISolidBrushStyle, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public SolidBrushStyleiOS()
		{
		}
		
		public SolidBrushStyleiOS(uint colorCode) : 
				base(colorCode)
		{
		}
		
		public SolidBrushStyleiOS(UIKit.UIColor color) : 
				base(color)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class SolidPenStyleiOS : SCISolidPenStyle, SciChart.Xamarin.Views.Drawing.ISolidPenStyle, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public SolidPenStyleiOS(uint color, float thickness, bool antiAliasing, float[] strokeDashArray) : 
				base(color, thickness, antiAliasing, strokeDashArray)
		{
		}
		
		public SolidPenStyleiOS()
		{
		}
		
		public SolidPenStyleiOS(uint colorCode, float thickness) : 
				base(colorCode, thickness)
		{
		}
		
		public SolidPenStyleiOS(UIKit.UIColor color, float thickness) : 
				base(color, thickness)
		{
		}
		
		public SolidPenStyleiOS(UIKit.UIColor color, float thickness, Foundation.NSNumber[] strokeDashArray) : 
				base(color, thickness, strokeDashArray)
		{
		}
		
		public SolidPenStyleiOS(uint colorCode, float thickness, Foundation.NSNumber[] strokeDashArray, bool antiAliasing) : 
				base(colorCode, thickness, strokeDashArray, antiAliasing)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class iOSFactory
	{
		
		public SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastCandlestickRenderableSeries NewFastCandlestickRenderableSeries()
		{
			return new FastCandlestickRenderableSeriesiOS();
		}
		
		public SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastLineRenderableSeries NewFastLineRenderableSeries()
		{
			return new FastLineRenderableSeriesiOS();
		}
		
		public SciChart.Xamarin.Views.Visuals.RenderableSeries3D.IScatterRenderableSeries3D NewScatterRenderableSeries3D()
		{
			return new ScatterRenderableSeries3DiOS();
		}
		
		public SciChart.Xamarin.Views.Visuals.PointMarkers.IEllipsePointMarker NewEllipsePointMarker()
		{
			return new EllipsePointMarkeriOS();
		}
		
		public SciChart.Xamarin.Views.Visuals.PointMarkers3D.IEllipsePointMarker3D NewEllipsePointMarker3D()
		{
			return new EllipsePointMarker3DiOS();
		}
		
		public SciChart.Xamarin.Views.Visuals.Axes.ICategoryDateTimeAxis NewCategoryDateTimeAxis()
		{
			return new CategoryDateAxisiOS();
		}
		
		public SciChart.Xamarin.Views.Visuals.Axes.INumericAxis NewNumericAxis()
		{
			return new NumericAxisiOS();
		}
		
		public SciChart.Xamarin.Views.Visuals.Axes3D.INumericAxis3D NewNumericAxis3D()
		{
			return new NumericAxis3DiOS();
		}
		
		public SciChart.Xamarin.Views.Visuals.Annotations.IAxisMarkerAnnotation NewAxisMarkerAnnotation()
		{
			return new AxisMarkerAnnotationiOS();
		}
		
		public SciChart.Xamarin.Views.Visuals.Annotations.IBoxAnnotation NewBoxAnnotation()
		{
			return new BoxAnnotationiOS();
		}
		
		public SciChart.Xamarin.Views.Visuals.Annotations.ILineAnnotation NewLineAnnotation()
		{
			return new LineAnnotationiOS();
		}
		
		public SciChart.Xamarin.Views.Visuals.Annotations.ILineArrowAnnotation NewLineArrowAnnotation()
		{
			return new LineArrowAnnotationiOS();
		}
		
		public SciChart.Xamarin.Views.Visuals.Annotations.ITextAnnotation NewTextAnnotation()
		{
			return new TextAnnotationiOS();
		}
		
		public SciChart.Xamarin.Views.Modifiers.ILegendModifier NewLegendModifier()
		{
			return new LegendModifieriOS();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IModifierGroup NewModifierGroup()
		{
			return new ModifierGroupiOS();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IModifierGroup3D NewModifierGroup3D()
		{
			return new ModifierGroup3DiOS();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IOrbitModifier3D NewOrbitModifier3D()
		{
			return new OrbitModifier3DiOS();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IPinchZoomModifier NewPinchZoomModifier()
		{
			return new PinchZoomModifieriOS();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IPinchZoomModifier3D NewPinchZoomModifier3D()
		{
			return new PinchZoomModifier3DiOS();
		}
		
		public SciChart.Xamarin.Views.Modifiers.ITooltipModifier NewTooltipModifier()
		{
			return new TooltipModifieriOS();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IZoomExtentsModifier NewZoomExtentsModifier()
		{
			return new ZoomExtentsModifieriOS();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IZoomExtentsModifier3D NewZoomExtentsModifier3D()
		{
			return new ZoomExtentsModifier3DiOS();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IZoomPanModifier NewZoomPanModifier()
		{
			return new ZoomPanModifieriOS();
		}
		
		public SciChart.Xamarin.Views.Model.IDoubleRange NewDoubleRange()
		{
			return new DoubleRangeiOS();
		}
		
		public SciChart.Xamarin.Views.Model.IDoubleRange NewDoubleRange(double min, double max)
		{
			return new DoubleRangeiOS(min, max);
		}
		
		public SciChart.Xamarin.Views.Model.DataSeries.IOhlcDataSeries<TX,TY> NewOhlcDataSeries<TX, TY>()
			where TX : System.IComparable
			where TY : System.IComparable
		{
			return new OhlcDataSeriesiOS<TX,TY>();
		}
		
		public SciChart.Xamarin.Views.Model.DataSeries.IXyDataSeries<TX,TY> NewXyDataSeries<TX, TY>()
			where TX : System.IComparable
			where TY : System.IComparable
		{
			return new XyDataSeriesiOS<TX,TY>();
		}
		
		public SciChart.Xamarin.Views.Model.DataSeries3D.IXyzDataSeries3D<TX,TY,TZ> NewXyzDataSeries3D<TX, TY, TZ>()
			where TX : System.IComparable
			where TY : System.IComparable
			where TZ : System.IComparable
		{
			return new XyzDataSeries3DiOS<TX,TY,TZ>();
		}
		
		public SciChart.Xamarin.Views.Drawing.IFontStyle NewFontStyle(float textSize, Color textColor)
		{
			return new FontStyleiOS(textSize, textColor);
		}
		
		public SciChart.Xamarin.Views.Drawing.ILinearGradientBrushStyle NewLinearGradientBrushStyle(float x1, float y1, float x2, float y2, Color startColor, Color endColor)
		{
			return new LinearGradientBrushStyleiOS(x1, y1, x2, y2, startColor, endColor);
		}
		
		public SciChart.Xamarin.Views.Drawing.ISolidBrushStyle NewSolidBrushStyle(Color color)
		{
			return new SolidBrushStyleiOS(color);
		}
		
		public SciChart.Xamarin.Views.Drawing.ISolidPenStyle NewSolidPenStyle(Color color, float thickness, bool antiAliasing, float[] strokeDashArray)
		{
			return new SolidPenStyleiOS(color, thickness, antiAliasing, strokeDashArray);
		}
	}
	
	#region AutoRange extensions
	static
	public class AutoRangeMapper
	{
		
		public static SciChart.Xamarin.Views.Visuals.Axes.AutoRange AutoRangeToXamarin(this SCIAutoRange nativeValue)
		{
			if ((nativeValue == SCIAutoRange.Once))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AutoRange.Once;
			}
			if ((nativeValue == SCIAutoRange.Always))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AutoRange.Always;
			}
			if ((nativeValue == SCIAutoRange.Never))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AutoRange.Never;
			}
			throw new System.ArgumentOutOfRangeException("The AutoRange value has not been handled");
		}
		
		public static SCIAutoRange AutoRangeFromXamarin(this SciChart.Xamarin.Views.Visuals.Axes.AutoRange xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AutoRange.Once))
			{
				return SCIAutoRange.Once;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AutoRange.Always))
			{
				return SCIAutoRange.Always;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AutoRange.Never))
			{
				return SCIAutoRange.Never;
			}
			throw new System.ArgumentOutOfRangeException("The AutoRange value has not been handled");
		}
	}
	#endregion
	
	#region AxisAlignment extensions
	static
	public class AxisAlignmentMapper
	{
		
		public static SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment AxisAlignmentToXamarin(this SCIAxisAlignment nativeValue)
		{
			if ((nativeValue == SCIAxisAlignment.Right))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Right;
			}
			if ((nativeValue == SCIAxisAlignment.Left))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Left;
			}
			if ((nativeValue == SCIAxisAlignment.Top))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Top;
			}
			if ((nativeValue == SCIAxisAlignment.Bottom))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Bottom;
			}
			if ((nativeValue == SCIAxisAlignment.Auto))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Auto;
			}
			throw new System.ArgumentOutOfRangeException("The AxisAlignment value has not been handled");
		}
		
		public static SCIAxisAlignment AxisAlignmentFromXamarin(this SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Right))
			{
				return SCIAxisAlignment.Right;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Left))
			{
				return SCIAxisAlignment.Left;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Top))
			{
				return SCIAxisAlignment.Top;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Bottom))
			{
				return SCIAxisAlignment.Bottom;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Auto))
			{
				return SCIAxisAlignment.Auto;
			}
			throw new System.ArgumentOutOfRangeException("The AxisAlignment value has not been handled");
		}
	}
	#endregion
	
	#region AnnotationCoordinateMode extensions
	static
	public class AnnotationCoordinateModeMapper
	{
		
		public static SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode AnnotationCoordinateModeToXamarin(this SCIAnnotationCoordinateMode nativeValue)
		{
			if ((nativeValue == SCIAnnotationCoordinateMode.Absolute))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.Absolute;
			}
			if ((nativeValue == SCIAnnotationCoordinateMode.Relative))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.Relative;
			}
			if ((nativeValue == SCIAnnotationCoordinateMode.RelativeX))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.RelativeX;
			}
			if ((nativeValue == SCIAnnotationCoordinateMode.RelativeY))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.RelativeY;
			}
			throw new System.ArgumentOutOfRangeException("The AnnotationCoordinateMode value has not been handled");
		}
		
		public static SCIAnnotationCoordinateMode AnnotationCoordinateModeFromXamarin(this SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.Absolute))
			{
				return SCIAnnotationCoordinateMode.Absolute;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.Relative))
			{
				return SCIAnnotationCoordinateMode.Relative;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.RelativeX))
			{
				return SCIAnnotationCoordinateMode.RelativeX;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.RelativeY))
			{
				return SCIAnnotationCoordinateMode.RelativeY;
			}
			throw new System.ArgumentOutOfRangeException("The AnnotationCoordinateMode value has not been handled");
		}
	}
	#endregion
	
	#region AnnotationSurface extensions
	static
	public class AnnotationSurfaceMapper
	{
		
		public static SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface AnnotationSurfaceToXamarin(this SCIAnnotationSurfaceEnum nativeValue)
		{
			if ((nativeValue == SCIAnnotationSurfaceEnum.AboveChart))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.AboveChart;
			}
			if ((nativeValue == SCIAnnotationSurfaceEnum.BelowChart))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.BelowChart;
			}
			if ((nativeValue == SCIAnnotationSurfaceEnum.XAxis))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.XAxis;
			}
			if ((nativeValue == SCIAnnotationSurfaceEnum.YAxis))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.YAxis;
			}
			throw new System.ArgumentOutOfRangeException("The AnnotationSurface value has not been handled");
		}
		
		public static SCIAnnotationSurfaceEnum AnnotationSurfaceFromXamarin(this SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.AboveChart))
			{
				return SCIAnnotationSurfaceEnum.AboveChart;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.BelowChart))
			{
				return SCIAnnotationSurfaceEnum.BelowChart;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.XAxis))
			{
				return SCIAnnotationSurfaceEnum.XAxis;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.YAxis))
			{
				return SCIAnnotationSurfaceEnum.YAxis;
			}
			throw new System.ArgumentOutOfRangeException("The AnnotationSurface value has not been handled");
		}
	}
	#endregion
	
	#region HorizontalAnchorPoint extensions
	static
	public class HorizontalAnchorPointMapper
	{
		
		public static SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint HorizontalAnchorPointToXamarin(this SCIHorizontalAnchorPoint nativeValue)
		{
			if ((nativeValue == SCIHorizontalAnchorPoint.Left))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint.Left;
			}
			if ((nativeValue == SCIHorizontalAnchorPoint.Center))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint.Center;
			}
			if ((nativeValue == SCIHorizontalAnchorPoint.Right))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint.Right;
			}
			throw new System.ArgumentOutOfRangeException("The HorizontalAnchorPoint value has not been handled");
		}
		
		public static SCIHorizontalAnchorPoint HorizontalAnchorPointFromXamarin(this SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint.Left))
			{
				return SCIHorizontalAnchorPoint.Left;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint.Center))
			{
				return SCIHorizontalAnchorPoint.Center;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint.Right))
			{
				return SCIHorizontalAnchorPoint.Right;
			}
			throw new System.ArgumentOutOfRangeException("The HorizontalAnchorPoint value has not been handled");
		}
	}
	#endregion
	
	#region VerticalAnchorPoint extensions
	static
	public class VerticalAnchorPointMapper
	{
		
		public static SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint VerticalAnchorPointToXamarin(this SCIVerticalAnchorPoint nativeValue)
		{
			if ((nativeValue == SCIVerticalAnchorPoint.Top))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint.Top;
			}
			if ((nativeValue == SCIVerticalAnchorPoint.Center))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint.Center;
			}
			if ((nativeValue == SCIVerticalAnchorPoint.Bottom))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint.Bottom;
			}
			throw new System.ArgumentOutOfRangeException("The VerticalAnchorPoint value has not been handled");
		}
		
		public static SCIVerticalAnchorPoint VerticalAnchorPointFromXamarin(this SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint.Top))
			{
				return SCIVerticalAnchorPoint.Top;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint.Center))
			{
				return SCIVerticalAnchorPoint.Center;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint.Bottom))
			{
				return SCIVerticalAnchorPoint.Bottom;
			}
			throw new System.ArgumentOutOfRangeException("The VerticalAnchorPoint value has not been handled");
		}
	}
	#endregion
	
	#region SourceMode extensions
	static
	public class SourceModeMapper
	{
		
		public static SciChart.Xamarin.Views.Modifiers.SourceMode SourceModeToXamarin(this SCISourceMode nativeValue)
		{
			if ((nativeValue == SCISourceMode.AllSeries))
			{
				return SciChart.Xamarin.Views.Modifiers.SourceMode.AllSeries;
			}
			if ((nativeValue == SCISourceMode.AllVisibleSeries))
			{
				return SciChart.Xamarin.Views.Modifiers.SourceMode.AllVisibleSeries;
			}
			if ((nativeValue == SCISourceMode.SelectedSeries))
			{
				return SciChart.Xamarin.Views.Modifiers.SourceMode.SelectedSeries;
			}
			if ((nativeValue == SCISourceMode.UnselectedSeries))
			{
				return SciChart.Xamarin.Views.Modifiers.SourceMode.UnselectedSeries;
			}
			throw new System.ArgumentOutOfRangeException("The SourceMode value has not been handled");
		}
		
		public static SCISourceMode SourceModeFromXamarin(this SciChart.Xamarin.Views.Modifiers.SourceMode xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Modifiers.SourceMode.AllSeries))
			{
				return SCISourceMode.AllSeries;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Modifiers.SourceMode.AllVisibleSeries))
			{
				return SCISourceMode.AllVisibleSeries;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Modifiers.SourceMode.SelectedSeries))
			{
				return SCISourceMode.SelectedSeries;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Modifiers.SourceMode.UnselectedSeries))
			{
				return SCISourceMode.UnselectedSeries;
			}
			throw new System.ArgumentOutOfRangeException("The SourceMode value has not been handled");
		}
	}
	#endregion
	
	#region RangeClipMode extensions
	static
	public class RangeClipModeMapper
	{
		
		public static SciChart.Xamarin.Views.Model.RangeClipMode RangeClipModeToXamarin(this SCIRangeClipMode nativeValue)
		{
			if ((nativeValue == SCIRangeClipMode.MinMax))
			{
				return SciChart.Xamarin.Views.Model.RangeClipMode.MinMax;
			}
			if ((nativeValue == SCIRangeClipMode.Max))
			{
				return SciChart.Xamarin.Views.Model.RangeClipMode.Max;
			}
			if ((nativeValue == SCIRangeClipMode.Min))
			{
				return SciChart.Xamarin.Views.Model.RangeClipMode.Min;
			}
			throw new System.ArgumentOutOfRangeException("The RangeClipMode value has not been handled");
		}
		
		public static SCIRangeClipMode RangeClipModeFromXamarin(this SciChart.Xamarin.Views.Model.RangeClipMode xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Model.RangeClipMode.MinMax))
			{
				return SCIRangeClipMode.MinMax;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Model.RangeClipMode.Max))
			{
				return SCIRangeClipMode.Max;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Model.RangeClipMode.Min))
			{
				return SCIRangeClipMode.Min;
			}
			throw new System.ArgumentOutOfRangeException("The RangeClipMode value has not been handled");
		}
	}
	#endregion
	
	#region Direction2D extensions
	static
	public class Direction2DMapper
	{
		
		public static SciChart.Xamarin.Views.Core.Common.Direction2D Direction2DToXamarin(this SCIDirection2D nativeValue)
		{
			if ((nativeValue == SCIDirection2D.XDirection))
			{
				return SciChart.Xamarin.Views.Core.Common.Direction2D.XDirection;
			}
			if ((nativeValue == SCIDirection2D.YDirection))
			{
				return SciChart.Xamarin.Views.Core.Common.Direction2D.YDirection;
			}
			if ((nativeValue == SCIDirection2D.XyDirection))
			{
				return SciChart.Xamarin.Views.Core.Common.Direction2D.XyDirection;
			}
			throw new System.ArgumentOutOfRangeException("The Direction2D value has not been handled");
		}
		
		public static SCIDirection2D Direction2DFromXamarin(this SciChart.Xamarin.Views.Core.Common.Direction2D xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Core.Common.Direction2D.XDirection))
			{
				return SCIDirection2D.XDirection;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Core.Common.Direction2D.YDirection))
			{
				return SCIDirection2D.YDirection;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Core.Common.Direction2D.XyDirection))
			{
				return SCIDirection2D.XyDirection;
			}
			throw new System.ArgumentOutOfRangeException("The Direction2D value has not been handled");
		}
	}
	#endregion
}
