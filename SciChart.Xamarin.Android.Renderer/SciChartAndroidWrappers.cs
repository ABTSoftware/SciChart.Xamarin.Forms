//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using AndroidApplication = Android.App.Application;
using AndroidComplexUnitType = Android.Util.ComplexUnitType;
using AndroidContext = Android.Content.Context;
using AndroidTypeface = Android.Graphics.Typeface;
using IAndroidAttributesSet = Android.Util.IAttributeSet;
using Xamarin.Forms;


namespace SciChart.Xamarin.Android.Renderer
{
	using SciChart.Core;
	using SciChart.Core.Licensing;
	using SciChart.Core.Common;
	using SciChart.Core.Utility;
	using SciChart.Core.Utility.Touch;
	using SciChart.Core.Utility.ObjectPooling;
	using SciChart.Core.Utility.Messaging;
	using SciChart.Core.Observable;
	using SciChart.Core.Model;
	using SciChart.Core.Framework;
	using SciChart.Data.Numerics;
	using SciChart.Data.Numerics.PointResamplers;
	using SciChart.Data.Numerics.Math;
	using SciChart.Data.Model;
	using SciChart.Drawing.Utility;
	using SciChart.Drawing.OpenGL;
	using SciChart.Drawing.Canvas;
	using SciChart.Drawing.Common;
	using SciChart.Charting;
	using SciChart.Charting.ViewportManagers;
	using SciChart.Charting.Utility;
	using SciChart.Charting.Utility.PropertyHelpers;
	using SciChart.Charting.Themes;
	using SciChart.Charting.StrategyManager;
	using SciChart.Charting.LayoutManagers;
	using SciChart.Charting.Visuals;
	using SciChart.Charting.Visuals.Rendering;
	using SciChart.Charting.Visuals.PointMarkers;
	using SciChart.Charting.Visuals.Legend;
	using SciChart.Charting.Visuals.Layout;
	using SciChart.Charting.Visuals.Axes;
	using SciChart.Charting.Visuals.Axes.RangeCalculators;
	using SciChart.Charting.Visuals.Axes.RangeAnimators;
	using SciChart.Charting.Visuals.Axes.ChangeListener;
	using SciChart.Charting.Visuals.RenderableSeries;
	using SciChart.Charting.Visuals.RenderableSeries.SeriesAnimators;
	using SciChart.Charting.Visuals.RenderableSeries.Data;
	using SciChart.Charting.Visuals.RenderableSeries.Tooltips;
	using SciChart.Charting.Visuals.RenderableSeries.PaletteProviders;
	using SciChart.Charting.Visuals.RenderableSeries.HitTest;
	using SciChart.Charting.Visuals.Annotations;
	using SciChart.Charting.Visuals.Animations;
	using SciChart.Charting.Numerics;
	using SciChart.Charting.Numerics.TickProviders;
	using SciChart.Charting.Numerics.TickCoordinatesProviders;
	using SciChart.Charting.Numerics.DeltaCalculators;
	using SciChart.Charting.Numerics.CoordinateCalculators;
	using SciChart.Charting.Numerics.LabelProviders;
	using SciChart.Charting.Modifiers;
	using SciChart.Charting.Modifiers.Behaviors;
	using SciChart.Charting.Model;
	using SciChart.Charting.Model.DataDistributionCalculator;
	using SciChart.Charting.Model.DataSeries;
	using SciChart.Charting3D.ViewportManagers;
	using SciChart.Charting3D.Interop;
	using SciChart.Charting3D.Common.Utils;
	using SciChart.Charting3D.Common.Math;
	using SciChart.Charting3D.Visuals;
	using SciChart.Charting3D.Visuals.Rendering;
	using SciChart.Charting3D.Visuals.Legend;
	using SciChart.Charting3D.Visuals.Camera;
	using SciChart.Charting3D.Visuals.Axes;
	using SciChart.Charting3D.Visuals.Axes.RangeCalculators;
	using SciChart.Charting3D.Visuals.Annotations;
	using SciChart.Charting3D.Visuals.PointMarkers;
	using SciChart.Charting3D.Visuals.RenderableSeries;
	using SciChart.Charting3D.Visuals.RenderableSeries.Waterfall;
	using SciChart.Charting3D.Visuals.RenderableSeries.Tooltips;
	using SciChart.Charting3D.Visuals.RenderableSeries.SurfaceMesh;
	using SciChart.Charting3D.Visuals.RenderableSeries.Scatter;
	using SciChart.Charting3D.Visuals.RenderableSeries.PointLine;
	using SciChart.Charting3D.Visuals.RenderableSeries.MetadataProviders;
	using SciChart.Charting3D.Visuals.RenderableSeries.Impulse;
	using SciChart.Charting3D.Visuals.RenderableSeries.HitTest;
	using SciChart.Charting3D.Visuals.RenderableSeries.FreeSurface;
	using SciChart.Charting3D.Visuals.RenderableSeries.Data;
	using SciChart.Charting3D.Visuals.RenderableSeries.Columns;
	using SciChart.Charting3D.Visuals.Primitives;
	using SciChart.Charting3D.Visuals.Primitives.DrawContext;
	using SciChart.Charting3D.Visuals.Primitives.Mesh;
	using SciChart.Charting3D.Utility;
	using SciChart.Charting3D.Utility.PropertyHelpers;
	using SciChart.Charting3D.Modifiers;
	using SciChart.Charting3D.Modifiers.Behaviors;
	using SciChart.Charting3D.Model;
	using SciChart.Charting3D.Model.DataSeries;
	using SciChart.Charting3D.Model.DataSeries.Xyz;
	using SciChart.Charting3D.Model.DataSeries.Waterfall;
	using SciChart.Charting3D.Model.DataSeries.Grid;
	using SciChart.Charting3D.Model.DataSeries.FreeSurface;
	using SciChart.Xamarin.Android.Renderer.Utility;
	
	
	public partial class FastCandlestickRenderableSeriesAndroid : FastCandlestickRenderableSeries, SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastCandlestickRenderableSeries, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public FastCandlestickRenderableSeriesAndroid()
		{
		}
		
		public FastCandlestickRenderableSeriesAndroid(SciChart.Charting.Visuals.RenderableSeries.Data.OhlcRenderPassData currentRenderPassData, SciChart.Charting.Visuals.RenderableSeries.HitTest.IHitProvider hitProvider, SciChart.Charting.Visuals.RenderableSeries.HitTest.INearestPointProvider nearestPointProvider) : 
				base(currentRenderPassData, hitProvider, nearestPointProvider)
		{
		}
		
		public new SciChart.Xamarin.Views.Drawing.IBrushStyle FillDownBrushStyle
		{
			get
			{
				return base.FillDownBrushStyle.BrushStyleToXamarin();
			}
			set
			{
				base.FillDownBrushStyle = value.BrushStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Drawing.IBrushStyle FillUpBrushStyle
		{
			get
			{
				return base.FillUpBrushStyle.BrushStyleToXamarin();
			}
			set
			{
				base.FillUpBrushStyle = value.BrushStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle StrokeDownStyle
		{
			get
			{
				return base.StrokeDownStyle.PenStyleToXamarin();
			}
			set
			{
				base.StrokeDownStyle = value.PenStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle StrokeUpStyle
		{
			get
			{
				return base.StrokeUpStyle.PenStyleToXamarin();
			}
			set
			{
				base.StrokeUpStyle = value.PenStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.DataSeries.IDataSeries DataSeries
		{
			get
			{
				return base.DataSeries.DataSeriesToXamarin();
			}
			set
			{
				base.DataSeries = value.DataSeriesFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle StrokeStyle
		{
			get
			{
				return base.StrokeStyle.PenStyleToXamarin();
			}
			set
			{
				base.StrokeStyle = value.PenStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker PointMarker
		{
			get
			{
				return base.PointMarker.PointMarkerToXamarin();
			}
			set
			{
				base.PointMarker = value.PointMarkerFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class FastLineRenderableSeriesAndroid : FastLineRenderableSeries, SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastLineRenderableSeries, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public FastLineRenderableSeriesAndroid()
		{
		}
		
		public FastLineRenderableSeriesAndroid(SciChart.Charting.Visuals.RenderableSeries.Data.LineRenderPassData currentRenderPassData, SciChart.Charting.Visuals.RenderableSeries.HitTest.IHitProvider hitProvider, SciChart.Charting.Visuals.RenderableSeries.HitTest.INearestPointProvider nearestPointProvider) : 
				base(currentRenderPassData, hitProvider, nearestPointProvider)
		{
		}
		
		public new SciChart.Xamarin.Views.Model.DataSeries.IDataSeries DataSeries
		{
			get
			{
				return base.DataSeries.DataSeriesToXamarin();
			}
			set
			{
				base.DataSeries = value.DataSeriesFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle StrokeStyle
		{
			get
			{
				return base.StrokeStyle.PenStyleToXamarin();
			}
			set
			{
				base.StrokeStyle = value.PenStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.PointMarkers.IPointMarker PointMarker
		{
			get
			{
				return base.PointMarker.PointMarkerToXamarin();
			}
			set
			{
				base.PointMarker = value.PointMarkerFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class ScatterRenderableSeries3DAndroid : ScatterRenderableSeries3D, SciChart.Xamarin.Views.Visuals.RenderableSeries3D.IScatterRenderableSeries3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public ScatterRenderableSeries3DAndroid()
		{
		}
		
		public ScatterRenderableSeries3DAndroid(SciChart.Charting3D.Visuals.RenderableSeries.Scatter.ScatterRenderPassData3D currentRenderPassData, SciChart.Charting3D.Visuals.RenderableSeries.BaseRenderableSeriesSceneEntity3D sceneEntity) : 
				base(currentRenderPassData, sceneEntity)
		{
		}
		
		public new SciChart.Xamarin.Views.Model.DataSeries3D.IDataSeries3D DataSeries
		{
			get
			{
				return base.DataSeries.DataSeriesToXamarin();
			}
			set
			{
				base.DataSeries = value.DataSeriesFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.PointMarkers3D.IPointMarker3D PointMarker
		{
			get
			{
				return base.PointMarker.PointMarker3DToXamarin();
			}
			set
			{
				base.PointMarker = value.PointMarker3DFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class EllipsePointMarkerAndroid : EllipsePointMarker, SciChart.Xamarin.Views.Visuals.PointMarkers.IEllipsePointMarker, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public EllipsePointMarkerAndroid()
		{
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle StrokeStyle
		{
			get
			{
				return base.StrokeStyle.PenStyleToXamarin();
			}
			set
			{
				base.StrokeStyle = value.PenStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Drawing.IBrushStyle FillStyle
		{
			get
			{
				return base.FillStyle.BrushStyleToXamarin();
			}
			set
			{
				base.FillStyle = value.BrushStyleFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class EllipsePointMarker3DAndroid : EllipsePointMarker3D, SciChart.Xamarin.Views.Visuals.PointMarkers3D.IEllipsePointMarker3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public EllipsePointMarker3DAndroid()
		{
		}
		
		public new Color Fill
		{
			get
			{
				return base.Fill.ColorToXamarin();
			}
			set
			{
				base.Fill = value.ColorFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class CategoryDateAxisAndroid : CategoryDateAxis, SciChart.Xamarin.Views.Visuals.Axes.ICategoryDateTimeAxis, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public CategoryDateAxisAndroid() : 
				base(AndroidApplication.Context)
		{
		}
		
		public CategoryDateAxisAndroid(AndroidContext context) : 
				base(context)
		{
		}
		
		public CategoryDateAxisAndroid(SciChart.Data.Model.IRange defaultNonZeroRange, SciChart.Charting.Visuals.Axes.IAxisModifierSurface axisModifierSurface) : 
				base(defaultNonZeroRange, axisModifierSurface)
		{
		}
		
		public new SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment AxisAlignment
		{
			get
			{
				return base.AxisAlignment.AxisAlignmentToXamarin();
			}
			set
			{
				base.AxisAlignment = value.AxisAlignmentFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Drawing.IBrushStyle AxisBandsFill
		{
			get
			{
				return base.AxisBandsStyle.BrushStyleToXamarin();
			}
			set
			{
				base.AxisBandsStyle = value.BrushStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Axes.AutoRange AutoRange
		{
			get
			{
				return base.AutoRange.AutoRangeToXamarin();
			}
			set
			{
				base.AutoRange = value.AutoRangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.IRange VisibleRange
		{
			get
			{
				return base.VisibleRange.RangeToXamarin();
			}
			set
			{
				base.VisibleRange = value.RangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.IRange GrowBy
		{
			get
			{
				return base.GrowBy.RangeToXamarin();
			}
			set
			{
				base.GrowBy = value.RangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.RangeClipMode VisibleRangeLimitMode
		{
			get
			{
				return base.VisibleRangeLimitMode.RangeClipModeToXamarin();
			}
			set
			{
				base.VisibleRangeLimitMode = value.RangeClipModeFromXamarin();
			}
		}
		
		public new System.IComparable MinimalZoomConstrain
		{
			get
			{
				return base.MinimalZoomConstrain.ComparableToXamarin();
			}
			set
			{
				base.MinimalZoomConstrain = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MaximumZoomConstrain
		{
			get
			{
				return base.MaximumZoomConstrain.ComparableToXamarin();
			}
			set
			{
				base.MaximumZoomConstrain = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MajorDelta
		{
			get
			{
				return base.MajorDelta.ComparableToXamarin();
			}
			set
			{
				base.MajorDelta = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MinorDelta
		{
			get
			{
				return base.MinorDelta.ComparableToXamarin();
			}
			set
			{
				base.MinorDelta = value.ComparableFromXamarin();
			}
		}
		
		public new uint MaxAutoTicks
		{
			get
			{
				return base.MaxAutoTicks.UIntToXamarin();
			}
			set
			{
				base.MaxAutoTicks = value.UIntFromXamarin();
			}
		}
		
		public new uint MinorsPerMajor
		{
			get
			{
				return base.MinorsPerMajor.UIntToXamarin();
			}
			set
			{
				base.MinorsPerMajor = value.UIntFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class NumericAxisAndroid : NumericAxis, SciChart.Xamarin.Views.Visuals.Axes.INumericAxis, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public NumericAxisAndroid() : 
				base(AndroidApplication.Context)
		{
		}
		
		public NumericAxisAndroid(AndroidContext context) : 
				base(context)
		{
		}
		
		public NumericAxisAndroid(SciChart.Charting.Visuals.Axes.IAxisModifierSurface axisModifierSurface) : 
				base(axisModifierSurface)
		{
		}
		
		public NumericAxisAndroid(SciChart.Data.Model.IRange defaultNonZeroRange, SciChart.Charting.Visuals.Axes.IAxisModifierSurface axisModifierSurface) : 
				base(defaultNonZeroRange, axisModifierSurface)
		{
		}
		
		public new SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment AxisAlignment
		{
			get
			{
				return base.AxisAlignment.AxisAlignmentToXamarin();
			}
			set
			{
				base.AxisAlignment = value.AxisAlignmentFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Drawing.IBrushStyle AxisBandsFill
		{
			get
			{
				return base.AxisBandsStyle.BrushStyleToXamarin();
			}
			set
			{
				base.AxisBandsStyle = value.BrushStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Axes.AutoRange AutoRange
		{
			get
			{
				return base.AutoRange.AutoRangeToXamarin();
			}
			set
			{
				base.AutoRange = value.AutoRangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.IRange VisibleRange
		{
			get
			{
				return base.VisibleRange.RangeToXamarin();
			}
			set
			{
				base.VisibleRange = value.RangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.IRange GrowBy
		{
			get
			{
				return base.GrowBy.RangeToXamarin();
			}
			set
			{
				base.GrowBy = value.RangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.RangeClipMode VisibleRangeLimitMode
		{
			get
			{
				return base.VisibleRangeLimitMode.RangeClipModeToXamarin();
			}
			set
			{
				base.VisibleRangeLimitMode = value.RangeClipModeFromXamarin();
			}
		}
		
		public new System.IComparable MinimalZoomConstrain
		{
			get
			{
				return base.MinimalZoomConstrain.ComparableToXamarin();
			}
			set
			{
				base.MinimalZoomConstrain = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MaximumZoomConstrain
		{
			get
			{
				return base.MaximumZoomConstrain.ComparableToXamarin();
			}
			set
			{
				base.MaximumZoomConstrain = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MajorDelta
		{
			get
			{
				return base.MajorDelta.ComparableToXamarin();
			}
			set
			{
				base.MajorDelta = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MinorDelta
		{
			get
			{
				return base.MinorDelta.ComparableToXamarin();
			}
			set
			{
				base.MinorDelta = value.ComparableFromXamarin();
			}
		}
		
		public new uint MaxAutoTicks
		{
			get
			{
				return base.MaxAutoTicks.UIntToXamarin();
			}
			set
			{
				base.MaxAutoTicks = value.UIntFromXamarin();
			}
		}
		
		public new uint MinorsPerMajor
		{
			get
			{
				return base.MinorsPerMajor.UIntToXamarin();
			}
			set
			{
				base.MinorsPerMajor = value.UIntFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class NumericAxis3DAndroid : NumericAxis3D, SciChart.Xamarin.Views.Visuals.Axes3D.INumericAxis3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public NumericAxis3DAndroid()
		{
		}
		
		public NumericAxis3DAndroid(SciChart.Data.Model.IRange defaultNonZeroRange) : 
				base(defaultNonZeroRange)
		{
		}
		
		public SciChart.Xamarin.Views.Drawing.IBrushStyle AxisBandsFill
		{
			get
			{
				return base.AxisBandsStyle.BrushStyleToXamarin();
			}
			set
			{
				base.AxisBandsStyle = value.BrushStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Axes.AutoRange AutoRange
		{
			get
			{
				return base.AutoRange.AutoRangeToXamarin();
			}
			set
			{
				base.AutoRange = value.AutoRangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.IRange VisibleRange
		{
			get
			{
				return base.VisibleRange.RangeToXamarin();
			}
			set
			{
				base.VisibleRange = value.RangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.IRange GrowBy
		{
			get
			{
				return base.GrowBy.RangeToXamarin();
			}
			set
			{
				base.GrowBy = value.RangeFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Model.RangeClipMode VisibleRangeLimitMode
		{
			get
			{
				return base.VisibleRangeLimitMode.RangeClipModeToXamarin();
			}
			set
			{
				base.VisibleRangeLimitMode = value.RangeClipModeFromXamarin();
			}
		}
		
		public new System.IComparable MinimalZoomConstrain
		{
			get
			{
				return base.MinimalZoomConstrain.ComparableToXamarin();
			}
			set
			{
				base.MinimalZoomConstrain = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MaximumZoomConstrain
		{
			get
			{
				return base.MaximumZoomConstrain.ComparableToXamarin();
			}
			set
			{
				base.MaximumZoomConstrain = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MajorDelta
		{
			get
			{
				return base.MajorDelta.ComparableToXamarin();
			}
			set
			{
				base.MajorDelta = value.ComparableFromXamarin();
			}
		}
		
		public new System.IComparable MinorDelta
		{
			get
			{
				return base.MinorDelta.ComparableToXamarin();
			}
			set
			{
				base.MinorDelta = value.ComparableFromXamarin();
			}
		}
		
		public new uint MaxAutoTicks
		{
			get
			{
				return base.MaxAutoTicks.UIntToXamarin();
			}
			set
			{
				base.MaxAutoTicks = value.UIntFromXamarin();
			}
		}
		
		public new uint MinorsPerMajor
		{
			get
			{
				return base.MinorsPerMajor.UIntToXamarin();
			}
			set
			{
				base.MinorsPerMajor = value.UIntFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class AxisMarkerAnnotationAndroid : AxisMarkerAnnotation, SciChart.Xamarin.Views.Visuals.Annotations.IAxisMarkerAnnotation, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public AxisMarkerAnnotationAndroid() : 
				base(AndroidApplication.Context)
		{
		}
		
		public AxisMarkerAnnotationAndroid(AndroidContext context) : 
				base(context)
		{
		}
		
		public AxisMarkerAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs) : 
				base(context, attrs)
		{
		}
		
		public AxisMarkerAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs, int defStyleAttr) : 
				base(context, attrs, defStyleAttr)
		{
		}
		
		public AxisMarkerAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs, int defStyleAttr, int defStyleRes) : 
				base(context, attrs, defStyleAttr, defStyleRes)
		{
		}
		
		public new SciChart.Xamarin.Views.Drawing.IFontStyle FontStyle
		{
			get
			{
				return base.FontStyle.FontStyleToXamarin();
			}
			set
			{
				base.FontStyle = value.FontStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint HorizontalAnchorPoint
		{
			get
			{
				return base.HorizontalAnchorPoint.HorizontalAnchorPointToXamarin();
			}
			set
			{
				base.HorizontalAnchorPoint = value.HorizontalAnchorPointFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint VerticalAnchorPoint
		{
			get
			{
				return base.VerticalAnchorPoint.VerticalAnchorPointToXamarin();
			}
			set
			{
				base.VerticalAnchorPoint = value.VerticalAnchorPointFromXamarin();
			}
		}
		
		public System.IComparable X1
		{
			get
			{
				return base.X1Value;
			}
			set
			{
				base.X1Value = value;
			}
		}
		
		public System.IComparable X2
		{
			get
			{
				return base.X2Value;
			}
			set
			{
				base.X2Value = value;
			}
		}
		
		public System.IComparable Y1
		{
			get
			{
				return base.Y1Value;
			}
			set
			{
				base.Y1Value = value;
			}
		}
		
		public System.IComparable Y2
		{
			get
			{
				return base.Y2Value;
			}
			set
			{
				base.Y2Value = value;
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D DragDirections
		{
			get
			{
				return base.DragDirections.Direction2DToXamarin();
			}
			set
			{
				base.DragDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D ResizeDirections
		{
			get
			{
				return base.ResizeDirections.Direction2DToXamarin();
			}
			set
			{
				base.ResizeDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface AnnotationSurface
		{
			get
			{
				return base.AnnotationSurface.AnnotationSurfaceToXamarin();
			}
			set
			{
				base.AnnotationSurface = value.AnnotationSurfaceFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode CoordinateMode
		{
			get
			{
				return base.CoordinateMode.AnnotationCoordinateModeToXamarin();
			}
			set
			{
				base.CoordinateMode = value.AnnotationCoordinateModeFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class BoxAnnotationAndroid : BoxAnnotation, SciChart.Xamarin.Views.Visuals.Annotations.IBoxAnnotation, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public BoxAnnotationAndroid() : 
				base(AndroidApplication.Context)
		{
		}
		
		public BoxAnnotationAndroid(AndroidContext context) : 
				base(context)
		{
		}
		
		public BoxAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs) : 
				base(context, attrs)
		{
		}
		
		public BoxAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs, int defStyleAttr) : 
				base(context, attrs, defStyleAttr)
		{
		}
		
		public BoxAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs, int defStyleAttr, int defStyleRes) : 
				base(context, attrs, defStyleAttr, defStyleRes)
		{
		}
		
		public System.IComparable X1
		{
			get
			{
				return base.X1Value;
			}
			set
			{
				base.X1Value = value;
			}
		}
		
		public System.IComparable X2
		{
			get
			{
				return base.X2Value;
			}
			set
			{
				base.X2Value = value;
			}
		}
		
		public System.IComparable Y1
		{
			get
			{
				return base.Y1Value;
			}
			set
			{
				base.Y1Value = value;
			}
		}
		
		public System.IComparable Y2
		{
			get
			{
				return base.Y2Value;
			}
			set
			{
				base.Y2Value = value;
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D DragDirections
		{
			get
			{
				return base.DragDirections.Direction2DToXamarin();
			}
			set
			{
				base.DragDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D ResizeDirections
		{
			get
			{
				return base.ResizeDirections.Direction2DToXamarin();
			}
			set
			{
				base.ResizeDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface AnnotationSurface
		{
			get
			{
				return base.AnnotationSurface.AnnotationSurfaceToXamarin();
			}
			set
			{
				base.AnnotationSurface = value.AnnotationSurfaceFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode CoordinateMode
		{
			get
			{
				return base.CoordinateMode.AnnotationCoordinateModeToXamarin();
			}
			set
			{
				base.CoordinateMode = value.AnnotationCoordinateModeFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class LineAnnotationAndroid : LineAnnotation, SciChart.Xamarin.Views.Visuals.Annotations.ILineAnnotation, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public LineAnnotationAndroid() : 
				base(AndroidApplication.Context)
		{
		}
		
		public LineAnnotationAndroid(AndroidContext context) : 
				base(context)
		{
		}
		
		public LineAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs) : 
				base(context, attrs)
		{
		}
		
		public LineAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs, int defStyleAttr) : 
				base(context, attrs, defStyleAttr)
		{
		}
		
		public LineAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs, int defStyleAttr, int defStyleRes) : 
				base(context, attrs, defStyleAttr, defStyleRes)
		{
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle Stroke
		{
			get
			{
				return base.Stroke.PenStyleToXamarin();
			}
			set
			{
				base.Stroke = value.PenStyleFromXamarin();
			}
		}
		
		public System.IComparable X1
		{
			get
			{
				return base.X1Value;
			}
			set
			{
				base.X1Value = value;
			}
		}
		
		public System.IComparable X2
		{
			get
			{
				return base.X2Value;
			}
			set
			{
				base.X2Value = value;
			}
		}
		
		public System.IComparable Y1
		{
			get
			{
				return base.Y1Value;
			}
			set
			{
				base.Y1Value = value;
			}
		}
		
		public System.IComparable Y2
		{
			get
			{
				return base.Y2Value;
			}
			set
			{
				base.Y2Value = value;
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D DragDirections
		{
			get
			{
				return base.DragDirections.Direction2DToXamarin();
			}
			set
			{
				base.DragDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D ResizeDirections
		{
			get
			{
				return base.ResizeDirections.Direction2DToXamarin();
			}
			set
			{
				base.ResizeDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface AnnotationSurface
		{
			get
			{
				return base.AnnotationSurface.AnnotationSurfaceToXamarin();
			}
			set
			{
				base.AnnotationSurface = value.AnnotationSurfaceFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode CoordinateMode
		{
			get
			{
				return base.CoordinateMode.AnnotationCoordinateModeToXamarin();
			}
			set
			{
				base.CoordinateMode = value.AnnotationCoordinateModeFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class LineArrowAnnotationAndroid : LineArrowAnnotation, SciChart.Xamarin.Views.Visuals.Annotations.ILineArrowAnnotation, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public LineArrowAnnotationAndroid() : 
				base(AndroidApplication.Context)
		{
		}
		
		public LineArrowAnnotationAndroid(AndroidContext context) : 
				base(context)
		{
		}
		
		public LineArrowAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs) : 
				base(context, attrs)
		{
		}
		
		public LineArrowAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs, int defStyleAttr) : 
				base(context, attrs, defStyleAttr)
		{
		}
		
		public LineArrowAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs, int defStyleAttr, int defStyleRes) : 
				base(context, attrs, defStyleAttr, defStyleRes)
		{
		}
		
		public new SciChart.Xamarin.Views.Drawing.IPenStyle Stroke
		{
			get
			{
				return base.Stroke.PenStyleToXamarin();
			}
			set
			{
				base.Stroke = value.PenStyleFromXamarin();
			}
		}
		
		public System.IComparable X1
		{
			get
			{
				return base.X1Value;
			}
			set
			{
				base.X1Value = value;
			}
		}
		
		public System.IComparable X2
		{
			get
			{
				return base.X2Value;
			}
			set
			{
				base.X2Value = value;
			}
		}
		
		public System.IComparable Y1
		{
			get
			{
				return base.Y1Value;
			}
			set
			{
				base.Y1Value = value;
			}
		}
		
		public System.IComparable Y2
		{
			get
			{
				return base.Y2Value;
			}
			set
			{
				base.Y2Value = value;
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D DragDirections
		{
			get
			{
				return base.DragDirections.Direction2DToXamarin();
			}
			set
			{
				base.DragDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D ResizeDirections
		{
			get
			{
				return base.ResizeDirections.Direction2DToXamarin();
			}
			set
			{
				base.ResizeDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface AnnotationSurface
		{
			get
			{
				return base.AnnotationSurface.AnnotationSurfaceToXamarin();
			}
			set
			{
				base.AnnotationSurface = value.AnnotationSurfaceFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode CoordinateMode
		{
			get
			{
				return base.CoordinateMode.AnnotationCoordinateModeToXamarin();
			}
			set
			{
				base.CoordinateMode = value.AnnotationCoordinateModeFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class TextAnnotationAndroid : TextAnnotation, SciChart.Xamarin.Views.Visuals.Annotations.ITextAnnotation, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public TextAnnotationAndroid() : 
				base(AndroidApplication.Context)
		{
		}
		
		public TextAnnotationAndroid(AndroidContext context) : 
				base(context)
		{
		}
		
		public TextAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs) : 
				base(context, attrs)
		{
		}
		
		public TextAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs, int defStyleAttr) : 
				base(context, attrs, defStyleAttr)
		{
		}
		
		public TextAnnotationAndroid(AndroidContext context, IAndroidAttributesSet attrs, int defStyleAttr, int defStyleRes) : 
				base(context, attrs, defStyleAttr, defStyleRes)
		{
		}
		
		public new SciChart.Xamarin.Views.Drawing.IFontStyle FontStyle
		{
			get
			{
				return base.FontStyle.FontStyleToXamarin();
			}
			set
			{
				base.FontStyle = value.FontStyleFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint HorizontalAnchorPoint
		{
			get
			{
				return base.HorizontalAnchorPoint.HorizontalAnchorPointToXamarin();
			}
			set
			{
				base.HorizontalAnchorPoint = value.HorizontalAnchorPointFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint VerticalAnchorPoint
		{
			get
			{
				return base.VerticalAnchorPoint.VerticalAnchorPointToXamarin();
			}
			set
			{
				base.VerticalAnchorPoint = value.VerticalAnchorPointFromXamarin();
			}
		}
		
		public System.IComparable X1
		{
			get
			{
				return base.X1Value;
			}
			set
			{
				base.X1Value = value;
			}
		}
		
		public System.IComparable X2
		{
			get
			{
				return base.X2Value;
			}
			set
			{
				base.X2Value = value;
			}
		}
		
		public System.IComparable Y1
		{
			get
			{
				return base.Y1Value;
			}
			set
			{
				base.Y1Value = value;
			}
		}
		
		public System.IComparable Y2
		{
			get
			{
				return base.Y2Value;
			}
			set
			{
				base.Y2Value = value;
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D DragDirections
		{
			get
			{
				return base.DragDirections.Direction2DToXamarin();
			}
			set
			{
				base.DragDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Core.Common.Direction2D ResizeDirections
		{
			get
			{
				return base.ResizeDirections.Direction2DToXamarin();
			}
			set
			{
				base.ResizeDirections = value.Direction2DFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface AnnotationSurface
		{
			get
			{
				return base.AnnotationSurface.AnnotationSurfaceToXamarin();
			}
			set
			{
				base.AnnotationSurface = value.AnnotationSurfaceFromXamarin();
			}
		}
		
		public new SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode CoordinateMode
		{
			get
			{
				return base.CoordinateMode.AnnotationCoordinateModeToXamarin();
			}
			set
			{
				base.CoordinateMode = value.AnnotationCoordinateModeFromXamarin();
			}
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class LegendModifierAndroid : LegendModifier, SciChart.Xamarin.Views.Modifiers.ILegendModifier, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public LegendModifierAndroid() : 
				base(AndroidApplication.Context)
		{
		}
		
		public LegendModifierAndroid(AndroidContext context) : 
				base(context)
		{
		}
		
		public LegendModifierAndroid(SciChart.Charting.Visuals.Legend.SciChartLegend legend) : 
				base(legend)
		{
		}
		
		public LegendModifierAndroid(SciChart.Charting.Visuals.Legend.SciChartLegend legend, bool useAutoPlacement) : 
				base(legend, useAutoPlacement)
		{
		}
		
		public LegendModifierAndroid(SciChart.Charting.Visuals.Legend.SciChartLegend legend, SciChart.Charting.Visuals.Legend.SeriesInfoLegendAdapter legendAdapter, bool useAutoPlacement) : 
				base(legend, legendAdapter, useAutoPlacement)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class ModifierGroupAndroid : ModifierGroup, SciChart.Xamarin.Views.Modifiers.IModifierGroup, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public ModifierGroupAndroid()
		{
		}
		
		public ModifierGroupAndroid(SciChart.Charting.Modifiers.IChartModifier[] childModifiers) : 
				base(childModifiers)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class ModifierGroup3DAndroid : ModifierGroup3D, SciChart.Xamarin.Views.Modifiers.IModifierGroup3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public ModifierGroup3DAndroid()
		{
		}
		
		public ModifierGroup3DAndroid(SciChart.Charting3D.Modifiers.IChartModifier3D[] childModifiers) : 
				base(childModifiers)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class OrbitModifier3DAndroid : OrbitModifier3D, SciChart.Xamarin.Views.Modifiers.IOrbitModifier3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public OrbitModifier3DAndroid()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class PinchZoomModifierAndroid : PinchZoomModifier, SciChart.Xamarin.Views.Modifiers.IPinchZoomModifier, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public PinchZoomModifierAndroid()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class PinchZoomModifier3DAndroid : PinchZoomModifier3D, SciChart.Xamarin.Views.Modifiers.IPinchZoomModifier3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public PinchZoomModifier3DAndroid()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class TooltipModifierAndroid : TooltipModifier, SciChart.Xamarin.Views.Modifiers.ITooltipModifier, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public TooltipModifierAndroid()
		{
		}
		
		public TooltipModifierAndroid(SciChart.Charting.Modifiers.Behaviors.CrossDrawableBehavior crossDrawableBehavior) : 
				base(crossDrawableBehavior)
		{
		}
		
		public TooltipModifierAndroid(SciChart.Charting.Modifiers.Behaviors.CrossDrawableBehavior crossDrawableBehavior, int tooltipContainerLayoutResId) : 
				base(crossDrawableBehavior, tooltipContainerLayoutResId)
		{
		}
		
		public TooltipModifierAndroid(SciChart.Charting.Modifiers.Behaviors.TooltipBehavior tooltipBehavior, SciChart.Charting.Modifiers.Behaviors.CrossDrawableBehavior crossDrawableBehavior) : 
				base(tooltipBehavior, crossDrawableBehavior)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class ZoomExtentsModifierAndroid : ZoomExtentsModifier, SciChart.Xamarin.Views.Modifiers.IZoomExtentsModifier, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public ZoomExtentsModifierAndroid()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class ZoomExtentsModifier3DAndroid : ZoomExtentsModifier3D, SciChart.Xamarin.Views.Modifiers.IZoomExtentsModifier3D, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public ZoomExtentsModifier3DAndroid()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class ZoomPanModifierAndroid : ZoomPanModifier, SciChart.Xamarin.Views.Modifiers.IZoomPanModifier, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public ZoomPanModifierAndroid()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class DoubleRangeAndroid : DoubleRange, SciChart.Xamarin.Views.Model.IDoubleRange, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public DoubleRangeAndroid(double min, double max) : 
				base(min, max)
		{
		}
		
		public DoubleRangeAndroid()
		{
		}
		
		public DoubleRangeAndroid(SciChart.Data.Model.DoubleRange range) : 
				base(range)
		{
		}
		
		public DoubleRangeAndroid(Java.Lang.Double min, Java.Lang.Double max) : 
				base(min, max)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class OhlcDataSeriesAndroid<TX, TY> : OhlcDataSeries<TX,TY>, SciChart.Xamarin.Views.Model.DataSeries.IOhlcDataSeries<TX,TY>, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
		where TX : System.IComparable
		where TY : System.IComparable
	{
		
		public OhlcDataSeriesAndroid()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class XyDataSeriesAndroid<TX, TY> : XyDataSeries<TX,TY>, SciChart.Xamarin.Views.Model.DataSeries.IXyDataSeries<TX,TY>, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
		where TX : System.IComparable
		where TY : System.IComparable
	{
		
		public XyDataSeriesAndroid()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class XyzDataSeries3DAndroid<TX, TY, TZ> : XyzDataSeries3D<TX,TY,TZ>, SciChart.Xamarin.Views.Model.DataSeries3D.IXyzDataSeries3D<TX,TY,TZ>, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
		where TX : System.IComparable
		where TY : System.IComparable
		where TZ : System.IComparable
	{
		
		public XyzDataSeries3DAndroid()
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class FontStyleAndroid : FontStyle, SciChart.Xamarin.Views.Drawing.IFontStyle, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public FontStyleAndroid(AndroidTypeface typeface, float textSize, uint textColor, bool antiAliasing) : 
				base(typeface, textSize, textColor, antiAliasing)
		{
		}
		
		public FontStyleAndroid(AndroidTypeface typeface, float textSize, System.Drawing.Color textColor, bool antiAliasing) : 
				base(typeface, textSize, textColor, antiAliasing)
		{
		}
		
		public FontStyleAndroid(AndroidContext context, AndroidTypeface typeface, float textSize, System.Drawing.Color textColor, AndroidComplexUnitType unit, bool antiAliasing) : 
				base(context, typeface, textSize, textColor, unit, antiAliasing)
		{
		}
		
		public FontStyleAndroid(float textSize, uint textColor) : 
				base(textSize, textColor)
		{
		}
		
		public FontStyleAndroid(float textSize, System.Drawing.Color textColor) : 
				base(textSize, textColor)
		{
		}
		
		public FontStyleAndroid(AndroidContext context, float textSize, System.Drawing.Color textColor, AndroidComplexUnitType unit) : 
				base(context, textSize, textColor, unit)
		{
		}
		
		public FontStyleAndroid(AndroidTypeface typeface, float textSize, int textColor, bool antiAliasing) : 
				base(typeface, textSize, textColor, antiAliasing)
		{
		}
		
		public FontStyleAndroid(float textSize, int textColor) : 
				base(textSize, textColor)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class LinearGradientBrushStyleAndroid : LinearGradientBrushStyle, SciChart.Xamarin.Views.Drawing.ILinearGradientBrushStyle, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public LinearGradientBrushStyleAndroid(float x0, float y0, float x1, float y1, System.Drawing.Color[] colors, float[] stops) : 
				base(x0, y0, x1, y1, colors, stops)
		{
		}
		
		public LinearGradientBrushStyleAndroid(float x0, float y0, float x1, float y1, uint[] colors, float[] stops) : 
				base(x0, y0, x1, y1, colors, stops)
		{
		}
		
		public LinearGradientBrushStyleAndroid(float x0, float y0, float x1, float y1, System.Drawing.Color startColor, System.Drawing.Color endColor) : 
				base(x0, y0, x1, y1, startColor, endColor)
		{
		}
		
		public LinearGradientBrushStyleAndroid(float x0, float y0, float x1, float y1, uint startColor, uint endColor) : 
				base(x0, y0, x1, y1, startColor, endColor)
		{
		}
		
		public LinearGradientBrushStyleAndroid(float x0, float y0, float x1, float y1, int startColor, int endColor) : 
				base(x0, y0, x1, y1, startColor, endColor)
		{
		}
		
		public LinearGradientBrushStyleAndroid(float x0, float y0, float x1, float y1, int[] colors, float[] stops) : 
				base(x0, y0, x1, y1, colors, stops)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class SolidBrushStyleAndroid : SolidBrushStyle, SciChart.Xamarin.Views.Drawing.ISolidBrushStyle, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public SolidBrushStyleAndroid(System.Drawing.Color color) : 
				base(color)
		{
		}
		
		public SolidBrushStyleAndroid(uint color) : 
				base(color)
		{
		}
		
		public SolidBrushStyleAndroid(int color) : 
				base(color)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class SolidPenStyleAndroid : SolidPenStyle, SciChart.Xamarin.Views.Drawing.ISolidPenStyle, SciChart.Xamarin.Views.Core.Common.INativeSciChartObject
	{
		
		public SolidPenStyleAndroid(uint color, float thickness, bool antiAliasing, float[] strokeDashArray) : 
				base(color, thickness, antiAliasing, strokeDashArray)
		{
		}
		
		public SolidPenStyleAndroid(System.Drawing.Color color, float thickness, bool antiAliasing, float[] strokeDashArray) : 
				base(color, thickness, antiAliasing, strokeDashArray)
		{
		}
		
		public SolidPenStyleAndroid(AndroidContext context, uint color, bool antiAliasing, float thickness, AndroidComplexUnitType unit, float[] strokeDashArray) : 
				base(context, color, antiAliasing, thickness, unit, strokeDashArray)
		{
		}
		
		public SolidPenStyleAndroid(AndroidContext context, System.Drawing.Color color, bool antiAliasing, float thickness, AndroidComplexUnitType unit, float[] strokeDashArray) : 
				base(context, color, antiAliasing, thickness, unit, strokeDashArray)
		{
		}
		
		public SolidPenStyleAndroid(int color, bool antiAliasing, float thickness, float[] strokeDashArray) : 
				base(color, antiAliasing, thickness, strokeDashArray)
		{
		}
		
		public SciChart.Xamarin.Views.Core.Common.INativeSciChartObject NativeSciChartObject
		{
			get
			{
				return this;
			}
		}
	}
	
	public partial class AndroidFactory
	{
		
		public SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastCandlestickRenderableSeries NewFastCandlestickRenderableSeries()
		{
			return new FastCandlestickRenderableSeriesAndroid();
		}
		
		public SciChart.Xamarin.Views.Visuals.RenderableSeries.IFastLineRenderableSeries NewFastLineRenderableSeries()
		{
			return new FastLineRenderableSeriesAndroid();
		}
		
		public SciChart.Xamarin.Views.Visuals.RenderableSeries3D.IScatterRenderableSeries3D NewScatterRenderableSeries3D()
		{
			return new ScatterRenderableSeries3DAndroid();
		}
		
		public SciChart.Xamarin.Views.Visuals.PointMarkers.IEllipsePointMarker NewEllipsePointMarker()
		{
			return new EllipsePointMarkerAndroid();
		}
		
		public SciChart.Xamarin.Views.Visuals.PointMarkers3D.IEllipsePointMarker3D NewEllipsePointMarker3D()
		{
			return new EllipsePointMarker3DAndroid();
		}
		
		public SciChart.Xamarin.Views.Visuals.Axes.ICategoryDateTimeAxis NewCategoryDateTimeAxis()
		{
			return new CategoryDateAxisAndroid();
		}
		
		public SciChart.Xamarin.Views.Visuals.Axes.INumericAxis NewNumericAxis()
		{
			return new NumericAxisAndroid();
		}
		
		public SciChart.Xamarin.Views.Visuals.Axes3D.INumericAxis3D NewNumericAxis3D()
		{
			return new NumericAxis3DAndroid();
		}
		
		public SciChart.Xamarin.Views.Visuals.Annotations.IAxisMarkerAnnotation NewAxisMarkerAnnotation()
		{
			return new AxisMarkerAnnotationAndroid();
		}
		
		public SciChart.Xamarin.Views.Visuals.Annotations.IBoxAnnotation NewBoxAnnotation()
		{
			return new BoxAnnotationAndroid();
		}
		
		public SciChart.Xamarin.Views.Visuals.Annotations.ILineAnnotation NewLineAnnotation()
		{
			return new LineAnnotationAndroid();
		}
		
		public SciChart.Xamarin.Views.Visuals.Annotations.ILineArrowAnnotation NewLineArrowAnnotation()
		{
			return new LineArrowAnnotationAndroid();
		}
		
		public SciChart.Xamarin.Views.Visuals.Annotations.ITextAnnotation NewTextAnnotation()
		{
			return new TextAnnotationAndroid();
		}
		
		public SciChart.Xamarin.Views.Modifiers.ILegendModifier NewLegendModifier()
		{
			return new LegendModifierAndroid();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IModifierGroup NewModifierGroup()
		{
			return new ModifierGroupAndroid();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IModifierGroup3D NewModifierGroup3D()
		{
			return new ModifierGroup3DAndroid();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IOrbitModifier3D NewOrbitModifier3D()
		{
			return new OrbitModifier3DAndroid();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IPinchZoomModifier NewPinchZoomModifier()
		{
			return new PinchZoomModifierAndroid();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IPinchZoomModifier3D NewPinchZoomModifier3D()
		{
			return new PinchZoomModifier3DAndroid();
		}
		
		public SciChart.Xamarin.Views.Modifiers.ITooltipModifier NewTooltipModifier()
		{
			return new TooltipModifierAndroid();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IZoomExtentsModifier NewZoomExtentsModifier()
		{
			return new ZoomExtentsModifierAndroid();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IZoomExtentsModifier3D NewZoomExtentsModifier3D()
		{
			return new ZoomExtentsModifier3DAndroid();
		}
		
		public SciChart.Xamarin.Views.Modifiers.IZoomPanModifier NewZoomPanModifier()
		{
			return new ZoomPanModifierAndroid();
		}
		
		public SciChart.Xamarin.Views.Model.IDoubleRange NewDoubleRange()
		{
			return new DoubleRangeAndroid();
		}
		
		public SciChart.Xamarin.Views.Model.IDoubleRange NewDoubleRange(double min, double max)
		{
			return new DoubleRangeAndroid(min, max);
		}
		
		public SciChart.Xamarin.Views.Model.DataSeries.IOhlcDataSeries<TX,TY> NewOhlcDataSeries<TX, TY>()
			where TX : System.IComparable
			where TY : System.IComparable
		{
			return new OhlcDataSeriesAndroid<TX,TY>();
		}
		
		public SciChart.Xamarin.Views.Model.DataSeries.IXyDataSeries<TX,TY> NewXyDataSeries<TX, TY>()
			where TX : System.IComparable
			where TY : System.IComparable
		{
			return new XyDataSeriesAndroid<TX,TY>();
		}
		
		public SciChart.Xamarin.Views.Model.DataSeries3D.IXyzDataSeries3D<TX,TY,TZ> NewXyzDataSeries3D<TX, TY, TZ>()
			where TX : System.IComparable
			where TY : System.IComparable
			where TZ : System.IComparable
		{
			return new XyzDataSeries3DAndroid<TX,TY,TZ>();
		}
		
		public SciChart.Xamarin.Views.Drawing.IFontStyle NewFontStyle(float textSize, Color textColor)
		{
			return new FontStyleAndroid(textSize, textColor);
		}
		
		public SciChart.Xamarin.Views.Drawing.ILinearGradientBrushStyle NewLinearGradientBrushStyle(float x1, float y1, float x2, float y2, Color startColor, Color endColor)
		{
			return new LinearGradientBrushStyleAndroid(x1, y1, x2, y2, startColor, endColor);
		}
		
		public SciChart.Xamarin.Views.Drawing.ISolidBrushStyle NewSolidBrushStyle(Color color)
		{
			return new SolidBrushStyleAndroid(color);
		}
		
		public SciChart.Xamarin.Views.Drawing.ISolidPenStyle NewSolidPenStyle(Color color, float thickness, bool antiAliasing, float[] strokeDashArray)
		{
			return new SolidPenStyleAndroid(color, thickness, antiAliasing, strokeDashArray);
		}
	}
	
	#region AutoRange extensions
	static
	public class AutoRangeMapper
	{
		
		public static SciChart.Xamarin.Views.Visuals.Axes.AutoRange AutoRangeToXamarin(this AutoRange nativeValue)
		{
			if ((nativeValue == AutoRange.Once))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AutoRange.Once;
			}
			if ((nativeValue == AutoRange.Always))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AutoRange.Always;
			}
			if ((nativeValue == AutoRange.Never))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AutoRange.Never;
			}
			throw new System.ArgumentOutOfRangeException("The AutoRange value has not been handled");
		}
		
		public static AutoRange AutoRangeFromXamarin(this SciChart.Xamarin.Views.Visuals.Axes.AutoRange xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AutoRange.Once))
			{
				return AutoRange.Once;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AutoRange.Always))
			{
				return AutoRange.Always;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AutoRange.Never))
			{
				return AutoRange.Never;
			}
			throw new System.ArgumentOutOfRangeException("The AutoRange value has not been handled");
		}
	}
	#endregion
	
	#region AxisAlignment extensions
	static
	public class AxisAlignmentMapper
	{
		
		public static SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment AxisAlignmentToXamarin(this AxisAlignment nativeValue)
		{
			if ((nativeValue == AxisAlignment.Right))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Right;
			}
			if ((nativeValue == AxisAlignment.Left))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Left;
			}
			if ((nativeValue == AxisAlignment.Top))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Top;
			}
			if ((nativeValue == AxisAlignment.Bottom))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Bottom;
			}
			if ((nativeValue == AxisAlignment.Auto))
			{
				return SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Auto;
			}
			throw new System.ArgumentOutOfRangeException("The AxisAlignment value has not been handled");
		}
		
		public static AxisAlignment AxisAlignmentFromXamarin(this SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Right))
			{
				return AxisAlignment.Right;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Left))
			{
				return AxisAlignment.Left;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Top))
			{
				return AxisAlignment.Top;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Bottom))
			{
				return AxisAlignment.Bottom;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Axes.AxisAlignment.Auto))
			{
				return AxisAlignment.Auto;
			}
			throw new System.ArgumentOutOfRangeException("The AxisAlignment value has not been handled");
		}
	}
	#endregion
	
	#region AnnotationCoordinateMode extensions
	static
	public class AnnotationCoordinateModeMapper
	{
		
		public static SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode AnnotationCoordinateModeToXamarin(this AnnotationCoordinateMode nativeValue)
		{
			if ((nativeValue == AnnotationCoordinateMode.Absolute))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.Absolute;
			}
			if ((nativeValue == AnnotationCoordinateMode.Relative))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.Relative;
			}
			if ((nativeValue == AnnotationCoordinateMode.RelativeX))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.RelativeX;
			}
			if ((nativeValue == AnnotationCoordinateMode.RelativeY))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.RelativeY;
			}
			throw new System.ArgumentOutOfRangeException("The AnnotationCoordinateMode value has not been handled");
		}
		
		public static AnnotationCoordinateMode AnnotationCoordinateModeFromXamarin(this SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.Absolute))
			{
				return AnnotationCoordinateMode.Absolute;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.Relative))
			{
				return AnnotationCoordinateMode.Relative;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.RelativeX))
			{
				return AnnotationCoordinateMode.RelativeX;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationCoordinateMode.RelativeY))
			{
				return AnnotationCoordinateMode.RelativeY;
			}
			throw new System.ArgumentOutOfRangeException("The AnnotationCoordinateMode value has not been handled");
		}
	}
	#endregion
	
	#region AnnotationSurface extensions
	static
	public class AnnotationSurfaceMapper
	{
		
		public static SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface AnnotationSurfaceToXamarin(this AnnotationSurfaceEnum nativeValue)
		{
			if ((nativeValue == AnnotationSurfaceEnum.AboveChart))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.AboveChart;
			}
			if ((nativeValue == AnnotationSurfaceEnum.BelowChart))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.BelowChart;
			}
			if ((nativeValue == AnnotationSurfaceEnum.XAxis))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.XAxis;
			}
			if ((nativeValue == AnnotationSurfaceEnum.YAxis))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.YAxis;
			}
			throw new System.ArgumentOutOfRangeException("The AnnotationSurface value has not been handled");
		}
		
		public static AnnotationSurfaceEnum AnnotationSurfaceFromXamarin(this SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.AboveChart))
			{
				return AnnotationSurfaceEnum.AboveChart;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.BelowChart))
			{
				return AnnotationSurfaceEnum.BelowChart;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.XAxis))
			{
				return AnnotationSurfaceEnum.XAxis;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.AnnotationSurface.YAxis))
			{
				return AnnotationSurfaceEnum.YAxis;
			}
			throw new System.ArgumentOutOfRangeException("The AnnotationSurface value has not been handled");
		}
	}
	#endregion
	
	#region HorizontalAnchorPoint extensions
	static
	public class HorizontalAnchorPointMapper
	{
		
		public static SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint HorizontalAnchorPointToXamarin(this HorizontalAnchorPoint nativeValue)
		{
			if ((nativeValue == HorizontalAnchorPoint.Left))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint.Left;
			}
			if ((nativeValue == HorizontalAnchorPoint.Center))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint.Center;
			}
			if ((nativeValue == HorizontalAnchorPoint.Right))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint.Right;
			}
			throw new System.ArgumentOutOfRangeException("The HorizontalAnchorPoint value has not been handled");
		}
		
		public static HorizontalAnchorPoint HorizontalAnchorPointFromXamarin(this SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint.Left))
			{
				return HorizontalAnchorPoint.Left;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint.Center))
			{
				return HorizontalAnchorPoint.Center;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.HorizontalAnchorPoint.Right))
			{
				return HorizontalAnchorPoint.Right;
			}
			throw new System.ArgumentOutOfRangeException("The HorizontalAnchorPoint value has not been handled");
		}
	}
	#endregion
	
	#region VerticalAnchorPoint extensions
	static
	public class VerticalAnchorPointMapper
	{
		
		public static SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint VerticalAnchorPointToXamarin(this VerticalAnchorPoint nativeValue)
		{
			if ((nativeValue == VerticalAnchorPoint.Top))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint.Top;
			}
			if ((nativeValue == VerticalAnchorPoint.Center))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint.Center;
			}
			if ((nativeValue == VerticalAnchorPoint.Bottom))
			{
				return SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint.Bottom;
			}
			throw new System.ArgumentOutOfRangeException("The VerticalAnchorPoint value has not been handled");
		}
		
		public static VerticalAnchorPoint VerticalAnchorPointFromXamarin(this SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint.Top))
			{
				return VerticalAnchorPoint.Top;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint.Center))
			{
				return VerticalAnchorPoint.Center;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Visuals.Annotations.VerticalAnchorPoint.Bottom))
			{
				return VerticalAnchorPoint.Bottom;
			}
			throw new System.ArgumentOutOfRangeException("The VerticalAnchorPoint value has not been handled");
		}
	}
	#endregion
	
	#region SourceMode extensions
	static
	public class SourceModeMapper
	{
		
		public static SciChart.Xamarin.Views.Modifiers.SourceMode SourceModeToXamarin(this SourceMode nativeValue)
		{
			if ((nativeValue == SourceMode.AllSeries))
			{
				return SciChart.Xamarin.Views.Modifiers.SourceMode.AllSeries;
			}
			if ((nativeValue == SourceMode.AllVisibleSeries))
			{
				return SciChart.Xamarin.Views.Modifiers.SourceMode.AllVisibleSeries;
			}
			if ((nativeValue == SourceMode.SelectedSeries))
			{
				return SciChart.Xamarin.Views.Modifiers.SourceMode.SelectedSeries;
			}
			if ((nativeValue == SourceMode.UnselectedSeries))
			{
				return SciChart.Xamarin.Views.Modifiers.SourceMode.UnselectedSeries;
			}
			throw new System.ArgumentOutOfRangeException("The SourceMode value has not been handled");
		}
		
		public static SourceMode SourceModeFromXamarin(this SciChart.Xamarin.Views.Modifiers.SourceMode xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Modifiers.SourceMode.AllSeries))
			{
				return SourceMode.AllSeries;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Modifiers.SourceMode.AllVisibleSeries))
			{
				return SourceMode.AllVisibleSeries;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Modifiers.SourceMode.SelectedSeries))
			{
				return SourceMode.SelectedSeries;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Modifiers.SourceMode.UnselectedSeries))
			{
				return SourceMode.UnselectedSeries;
			}
			throw new System.ArgumentOutOfRangeException("The SourceMode value has not been handled");
		}
	}
	#endregion
	
	#region RangeClipMode extensions
	static
	public class RangeClipModeMapper
	{
		
		public static SciChart.Xamarin.Views.Model.RangeClipMode RangeClipModeToXamarin(this RangeClipMode nativeValue)
		{
			if ((nativeValue == RangeClipMode.MinMax))
			{
				return SciChart.Xamarin.Views.Model.RangeClipMode.MinMax;
			}
			if ((nativeValue == RangeClipMode.Max))
			{
				return SciChart.Xamarin.Views.Model.RangeClipMode.Max;
			}
			if ((nativeValue == RangeClipMode.Min))
			{
				return SciChart.Xamarin.Views.Model.RangeClipMode.Min;
			}
			throw new System.ArgumentOutOfRangeException("The RangeClipMode value has not been handled");
		}
		
		public static RangeClipMode RangeClipModeFromXamarin(this SciChart.Xamarin.Views.Model.RangeClipMode xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Model.RangeClipMode.MinMax))
			{
				return RangeClipMode.MinMax;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Model.RangeClipMode.Max))
			{
				return RangeClipMode.Max;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Model.RangeClipMode.Min))
			{
				return RangeClipMode.Min;
			}
			throw new System.ArgumentOutOfRangeException("The RangeClipMode value has not been handled");
		}
	}
	#endregion
	
	#region Direction2D extensions
	static
	public class Direction2DMapper
	{
		
		public static SciChart.Xamarin.Views.Core.Common.Direction2D Direction2DToXamarin(this Direction2D nativeValue)
		{
			if ((nativeValue == Direction2D.XDirection))
			{
				return SciChart.Xamarin.Views.Core.Common.Direction2D.XDirection;
			}
			if ((nativeValue == Direction2D.YDirection))
			{
				return SciChart.Xamarin.Views.Core.Common.Direction2D.YDirection;
			}
			if ((nativeValue == Direction2D.XyDirection))
			{
				return SciChart.Xamarin.Views.Core.Common.Direction2D.XyDirection;
			}
			throw new System.ArgumentOutOfRangeException("The Direction2D value has not been handled");
		}
		
		public static Direction2D Direction2DFromXamarin(this SciChart.Xamarin.Views.Core.Common.Direction2D xamarinFormsValue)
		{
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Core.Common.Direction2D.XDirection))
			{
				return Direction2D.XDirection;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Core.Common.Direction2D.YDirection))
			{
				return Direction2D.YDirection;
			}
			if ((xamarinFormsValue == SciChart.Xamarin.Views.Core.Common.Direction2D.XyDirection))
			{
				return Direction2D.XyDirection;
			}
			throw new System.ArgumentOutOfRangeException("The Direction2D value has not been handled");
		}
	}
	#endregion
}
